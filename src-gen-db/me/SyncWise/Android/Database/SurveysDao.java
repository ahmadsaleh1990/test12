package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Surveys;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Surveys.
*/
public class SurveysDao extends AbstractDao<Surveys, Long> {

    public static final String TABLENAME = "Surveys";

    /**
     * Properties of entity Surveys.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SurveyID = new Property(1, long.class, "SurveyID", false, "SurveyID");
        public final static Property CompanyCode = new Property(2, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property SurveyDescription = new Property(3, String.class, "SurveyDescription", false, "SurveyDescription");
        public final static Property SurveyAltDescription = new Property(4, String.class, "SurveyAltDescription", false, "SurveyAltDescription");
        public final static Property SurveyType = new Property(5, Integer.class, "SurveyType", false, "SurveyType");
        public final static Property IsForced = new Property(6, Integer.class, "IsForced", false, "IsForced");
        public final static Property StartDate = new Property(7, java.util.Date.class, "StartDate", false, "StartDate");
        public final static Property EndDate = new Property(8, java.util.Date.class, "EndDate", false, "EndDate");
        public final static Property StampDate = new Property(9, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public SurveysDao(DaoConfig config) {
        super(config);
    }
    
    public SurveysDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Surveys' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SurveyID' INTEGER NOT NULL UNIQUE ," + // 1: SurveyID
                "'CompanyCode' TEXT," + // 2: CompanyCode
                "'SurveyDescription' TEXT," + // 3: SurveyDescription
                "'SurveyAltDescription' TEXT," + // 4: SurveyAltDescription
                "'SurveyType' INTEGER," + // 5: SurveyType
                "'IsForced' INTEGER," + // 6: IsForced
                "'StartDate' INTEGER," + // 7: StartDate
                "'EndDate' INTEGER," + // 8: EndDate
                "'StampDate' INTEGER NOT NULL );"); // 9: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Surveys'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Surveys entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSurveyID());
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(3, CompanyCode);
        }
 
        String SurveyDescription = entity.getSurveyDescription();
        if (SurveyDescription != null) {
            stmt.bindString(4, SurveyDescription);
        }
 
        String SurveyAltDescription = entity.getSurveyAltDescription();
        if (SurveyAltDescription != null) {
            stmt.bindString(5, SurveyAltDescription);
        }
 
        Integer SurveyType = entity.getSurveyType();
        if (SurveyType != null) {
            stmt.bindLong(6, SurveyType);
        }
 
        Integer IsForced = entity.getIsForced();
        if (IsForced != null) {
            stmt.bindLong(7, IsForced);
        }
 
        java.util.Date StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindLong(8, StartDate.getTime());
        }
 
        java.util.Date EndDate = entity.getEndDate();
        if (EndDate != null) {
            stmt.bindLong(9, EndDate.getTime());
        }
        stmt.bindLong(10, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Surveys readEntity(Cursor cursor, int offset) {
        Surveys entity = new Surveys( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // SurveyID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SurveyDescription
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SurveyAltDescription
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // SurveyType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // IsForced
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // StartDate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // EndDate
            new java.util.Date(cursor.getLong(offset + 9)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Surveys entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSurveyID(cursor.getLong(offset + 1));
        entity.setCompanyCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSurveyDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSurveyAltDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSurveyType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsForced(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStartDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setEndDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Surveys entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Surveys entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
