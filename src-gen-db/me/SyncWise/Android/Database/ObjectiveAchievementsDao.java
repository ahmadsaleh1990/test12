package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ObjectiveAchievements;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ObjectiveAchievements.
*/
public class ObjectiveAchievementsDao extends AbstractDao<ObjectiveAchievements, Long> {

    public static final String TABLENAME = "ObjectiveAchievements";

    /**
     * Properties of entity ObjectiveAchievements.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectiveID = new Property(1, Long.class, "ObjectiveID", false, "ObjectiveID");
        public final static Property AchievementType = new Property(2, Integer.class, "AchievementType", false, "AchievementType");
        public final static Property UserCode = new Property(3, String.class, "UserCode", false, "UserCode");
        public final static Property ClientCode = new Property(4, String.class, "ClientCode", false, "ClientCode");
        public final static Property DivisionCode = new Property(5, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(6, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property VisitID = new Property(7, Long.class, "VisitID", false, "VisitID");
        public final static Property ObjectiveAchievement = new Property(8, Integer.class, "ObjectiveAchievement", false, "ObjectiveAchievement");
        public final static Property AchievementDate = new Property(9, java.util.Date.class, "AchievementDate", false, "AchievementDate");
        public final static Property ReasonCode = new Property(10, String.class, "ReasonCode", false, "ReasonCode");
        public final static Property Notes = new Property(11, String.class, "Notes", false, "Notes");
        public final static Property IsProcessed = new Property(12, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(13, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ObjectiveAchievementsDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectiveAchievementsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ObjectiveAchievements' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ObjectiveID' INTEGER," + // 1: ObjectiveID
                "'AchievementType' INTEGER," + // 2: AchievementType
                "'UserCode' TEXT," + // 3: UserCode
                "'ClientCode' TEXT," + // 4: ClientCode
                "'DivisionCode' TEXT," + // 5: DivisionCode
                "'CompanyCode' TEXT," + // 6: CompanyCode
                "'VisitID' INTEGER," + // 7: VisitID
                "'ObjectiveAchievement' INTEGER," + // 8: ObjectiveAchievement
                "'AchievementDate' INTEGER," + // 9: AchievementDate
                "'ReasonCode' TEXT," + // 10: ReasonCode
                "'Notes' TEXT," + // 11: Notes
                "'IsProcessed' INTEGER NOT NULL ," + // 12: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 13: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ObjectiveAchievements'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectiveAchievements entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ObjectiveID = entity.getObjectiveID();
        if (ObjectiveID != null) {
            stmt.bindLong(2, ObjectiveID);
        }
 
        Integer AchievementType = entity.getAchievementType();
        if (AchievementType != null) {
            stmt.bindLong(3, AchievementType);
        }
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(4, UserCode);
        }
 
        String ClientCode = entity.getClientCode();
        if (ClientCode != null) {
            stmt.bindString(5, ClientCode);
        }
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(6, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(7, CompanyCode);
        }
 
        Long VisitID = entity.getVisitID();
        if (VisitID != null) {
            stmt.bindLong(8, VisitID);
        }
 
        Integer ObjectiveAchievement = entity.getObjectiveAchievement();
        if (ObjectiveAchievement != null) {
            stmt.bindLong(9, ObjectiveAchievement);
        }
 
        java.util.Date AchievementDate = entity.getAchievementDate();
        if (AchievementDate != null) {
            stmt.bindLong(10, AchievementDate.getTime());
        }
 
        String ReasonCode = entity.getReasonCode();
        if (ReasonCode != null) {
            stmt.bindString(11, ReasonCode);
        }
 
        String Notes = entity.getNotes();
        if (Notes != null) {
            stmt.bindString(12, Notes);
        }
        stmt.bindLong(13, entity.getIsProcessed());
        stmt.bindLong(14, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectiveAchievements readEntity(Cursor cursor, int offset) {
        ObjectiveAchievements entity = new ObjectiveAchievements( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ObjectiveID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // AchievementType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ClientCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DivisionCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CompanyCode
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // VisitID
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ObjectiveAchievement
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // AchievementDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ReasonCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Notes
            cursor.getInt(offset + 12), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 13)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectiveAchievements entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectiveID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAchievementType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUserCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClientCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDivisionCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompanyCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVisitID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setObjectiveAchievement(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAchievementDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setReasonCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNotes(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsProcessed(cursor.getInt(offset + 12));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 13)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectiveAchievements entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectiveAchievements entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
