package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Vehicles;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Vehicles.
*/
public class VehiclesDao extends AbstractDao<Vehicles, Long> {

    public static final String TABLENAME = "Vehicles";

    /**
     * Properties of entity Vehicles.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VehicleCode = new Property(1, String.class, "VehicleCode", false, "VehicleCode");
        public final static Property DivisionCode = new Property(2, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(3, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property VehicleName = new Property(4, String.class, "VehicleName", false, "VehicleName");
        public final static Property VehicleAltName = new Property(5, String.class, "VehicleAltName", false, "VehicleAltName");
        public final static Property PlateNumber = new Property(6, String.class, "PlateNumber", false, "PlateNumber");
        public final static Property LoadLimit = new Property(7, Double.class, "LoadLimit", false, "LoadLimit");
        public final static Property LastOdometer = new Property(8, Double.class, "LastOdometer", false, "LastOdometer");
        public final static Property StampDate = new Property(9, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public VehiclesDao(DaoConfig config) {
        super(config);
    }
    
    public VehiclesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Vehicles' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'VehicleCode' TEXT NOT NULL ," + // 1: VehicleCode
                "'DivisionCode' TEXT NOT NULL ," + // 2: DivisionCode
                "'CompanyCode' TEXT NOT NULL ," + // 3: CompanyCode
                "'VehicleName' TEXT," + // 4: VehicleName
                "'VehicleAltName' TEXT," + // 5: VehicleAltName
                "'PlateNumber' TEXT," + // 6: PlateNumber
                "'LoadLimit' REAL," + // 7: LoadLimit
                "'LastOdometer' REAL," + // 8: LastOdometer
                "'StampDate' INTEGER NOT NULL );"); // 9: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Vehicles'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Vehicles entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVehicleCode());
        stmt.bindString(3, entity.getDivisionCode());
        stmt.bindString(4, entity.getCompanyCode());
 
        String VehicleName = entity.getVehicleName();
        if (VehicleName != null) {
            stmt.bindString(5, VehicleName);
        }
 
        String VehicleAltName = entity.getVehicleAltName();
        if (VehicleAltName != null) {
            stmt.bindString(6, VehicleAltName);
        }
 
        String PlateNumber = entity.getPlateNumber();
        if (PlateNumber != null) {
            stmt.bindString(7, PlateNumber);
        }
 
        Double LoadLimit = entity.getLoadLimit();
        if (LoadLimit != null) {
            stmt.bindDouble(8, LoadLimit);
        }
 
        Double LastOdometer = entity.getLastOdometer();
        if (LastOdometer != null) {
            stmt.bindDouble(9, LastOdometer);
        }
        stmt.bindLong(10, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Vehicles readEntity(Cursor cursor, int offset) {
        Vehicles entity = new Vehicles( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // VehicleCode
            cursor.getString(offset + 2), // DivisionCode
            cursor.getString(offset + 3), // CompanyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // VehicleName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // VehicleAltName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PlateNumber
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // LoadLimit
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // LastOdometer
            new java.util.Date(cursor.getLong(offset + 9)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Vehicles entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVehicleCode(cursor.getString(offset + 1));
        entity.setDivisionCode(cursor.getString(offset + 2));
        entity.setCompanyCode(cursor.getString(offset + 3));
        entity.setVehicleName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVehicleAltName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlateNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLoadLimit(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setLastOdometer(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Vehicles entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Vehicles entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
