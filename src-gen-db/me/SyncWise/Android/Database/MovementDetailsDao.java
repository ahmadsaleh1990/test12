package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.MovementDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MovementDetails.
*/
public class MovementDetailsDao extends AbstractDao<MovementDetails, Long> {

    public static final String TABLENAME = "MovementDetails";

    /**
     * Properties of entity MovementDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MovementCode = new Property(1, String.class, "MovementCode", false, "MovementCode");
        public final static Property LineID = new Property(2, int.class, "LineID", false, "LineID");
        public final static Property ItemCode = new Property(3, String.class, "ItemCode", false, "ItemCode");
        public final static Property QuantityBig = new Property(4, Double.class, "QuantityBig", false, "QuantityBig");
        public final static Property QuantityMedium = new Property(5, Double.class, "QuantityMedium", false, "QuantityMedium");
        public final static Property QuantitySmall = new Property(6, Double.class, "QuantitySmall", false, "QuantitySmall");
        public final static Property BasicUnitQuantity = new Property(7, Double.class, "BasicUnitQuantity", false, "BasicUnitQuantity");
        public final static Property PriceBig = new Property(8, Double.class, "PriceBig", false, "PriceBig");
        public final static Property PriceMedium = new Property(9, Double.class, "PriceMedium", false, "PriceMedium");
        public final static Property PriceSmall = new Property(10, Double.class, "PriceSmall", false, "PriceSmall");
        public final static Property ApprovedQuantityBig = new Property(11, Double.class, "ApprovedQuantityBig", false, "ApprovedQuantityBig");
        public final static Property ApprovedQuantityMedium = new Property(12, Double.class, "ApprovedQuantityMedium", false, "ApprovedQuantityMedium");
        public final static Property ApprovedQuantitySmall = new Property(13, Double.class, "ApprovedQuantitySmall", false, "ApprovedQuantitySmall");
        public final static Property ApprovedBasicUnitQuantity = new Property(14, Double.class, "ApprovedBasicUnitQuantity", false, "ApprovedBasicUnitQuantity");
        public final static Property MissedQuantityBig = new Property(15, Double.class, "MissedQuantityBig", false, "MissedQuantityBig");
        public final static Property MissedQuantityMedium = new Property(16, Double.class, "MissedQuantityMedium", false, "MissedQuantityMedium");
        public final static Property MissedQuantitySmall = new Property(17, Double.class, "MissedQuantitySmall", false, "MissedQuantitySmall");
        public final static Property MissedBasicUnitQuantity = new Property(18, Double.class, "MissedBasicUnitQuantity", false, "MissedBasicUnitQuantity");
        public final static Property TotalLineAmount = new Property(19, Double.class, "TotalLineAmount", false, "TotalLineAmount");
        public final static Property DiscountAmount = new Property(20, Double.class, "DiscountAmount", false, "DiscountAmount");
        public final static Property DiscountPercentage = new Property(21, Double.class, "DiscountPercentage", false, "DiscountPercentage");
        public final static Property StockQuantity = new Property(22, Double.class, "StockQuantity", false, "StockQuantity");
        public final static Property ItemName = new Property(23, String.class, "ItemName", false, "ItemName");
        public final static Property ItemAltName = new Property(24, String.class, "ItemAltName", false, "ItemAltName");
        public final static Property ReasonCode = new Property(25, String.class, "ReasonCode", false, "ReasonCode");
        public final static Property ReasonAffectStock = new Property(26, String.class, "ReasonAffectStock", false, "ReasonAffectStock");
        public final static Property ItemLot = new Property(27, String.class, "ItemLot", false, "ItemLot");
        public final static Property ItemExpiryDate = new Property(28, java.util.Date.class, "ItemExpiryDate", false, "ItemExpiryDate");
        public final static Property ItemTaxPercentage = new Property(29, Double.class, "ItemTaxPercentage", false, "ItemTaxPercentage");
        public final static Property StampDate = new Property(30, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public MovementDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public MovementDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MovementDetails' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MovementCode' TEXT NOT NULL ," + // 1: MovementCode
                "'LineID' INTEGER NOT NULL ," + // 2: LineID
                "'ItemCode' TEXT," + // 3: ItemCode
                "'QuantityBig' REAL," + // 4: QuantityBig
                "'QuantityMedium' REAL," + // 5: QuantityMedium
                "'QuantitySmall' REAL," + // 6: QuantitySmall
                "'BasicUnitQuantity' REAL," + // 7: BasicUnitQuantity
                "'PriceBig' REAL," + // 8: PriceBig
                "'PriceMedium' REAL," + // 9: PriceMedium
                "'PriceSmall' REAL," + // 10: PriceSmall
                "'ApprovedQuantityBig' REAL," + // 11: ApprovedQuantityBig
                "'ApprovedQuantityMedium' REAL," + // 12: ApprovedQuantityMedium
                "'ApprovedQuantitySmall' REAL," + // 13: ApprovedQuantitySmall
                "'ApprovedBasicUnitQuantity' REAL," + // 14: ApprovedBasicUnitQuantity
                "'MissedQuantityBig' REAL," + // 15: MissedQuantityBig
                "'MissedQuantityMedium' REAL," + // 16: MissedQuantityMedium
                "'MissedQuantitySmall' REAL," + // 17: MissedQuantitySmall
                "'MissedBasicUnitQuantity' REAL," + // 18: MissedBasicUnitQuantity
                "'TotalLineAmount' REAL," + // 19: TotalLineAmount
                "'DiscountAmount' REAL," + // 20: DiscountAmount
                "'DiscountPercentage' REAL," + // 21: DiscountPercentage
                "'StockQuantity' REAL," + // 22: StockQuantity
                "'ItemName' TEXT," + // 23: ItemName
                "'ItemAltName' TEXT," + // 24: ItemAltName
                "'ReasonCode' TEXT," + // 25: ReasonCode
                "'ReasonAffectStock' TEXT," + // 26: ReasonAffectStock
                "'ItemLot' TEXT," + // 27: ItemLot
                "'ItemExpiryDate' INTEGER," + // 28: ItemExpiryDate
                "'ItemTaxPercentage' REAL," + // 29: ItemTaxPercentage
                "'StampDate' INTEGER NOT NULL );"); // 30: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MovementDetails'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MovementDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMovementCode());
        stmt.bindLong(3, entity.getLineID());
 
        String ItemCode = entity.getItemCode();
        if (ItemCode != null) {
            stmt.bindString(4, ItemCode);
        }
 
        Double QuantityBig = entity.getQuantityBig();
        if (QuantityBig != null) {
            stmt.bindDouble(5, QuantityBig);
        }
 
        Double QuantityMedium = entity.getQuantityMedium();
        if (QuantityMedium != null) {
            stmt.bindDouble(6, QuantityMedium);
        }
 
        Double QuantitySmall = entity.getQuantitySmall();
        if (QuantitySmall != null) {
            stmt.bindDouble(7, QuantitySmall);
        }
 
        Double BasicUnitQuantity = entity.getBasicUnitQuantity();
        if (BasicUnitQuantity != null) {
            stmt.bindDouble(8, BasicUnitQuantity);
        }
 
        Double PriceBig = entity.getPriceBig();
        if (PriceBig != null) {
            stmt.bindDouble(9, PriceBig);
        }
 
        Double PriceMedium = entity.getPriceMedium();
        if (PriceMedium != null) {
            stmt.bindDouble(10, PriceMedium);
        }
 
        Double PriceSmall = entity.getPriceSmall();
        if (PriceSmall != null) {
            stmt.bindDouble(11, PriceSmall);
        }
 
        Double ApprovedQuantityBig = entity.getApprovedQuantityBig();
        if (ApprovedQuantityBig != null) {
            stmt.bindDouble(12, ApprovedQuantityBig);
        }
 
        Double ApprovedQuantityMedium = entity.getApprovedQuantityMedium();
        if (ApprovedQuantityMedium != null) {
            stmt.bindDouble(13, ApprovedQuantityMedium);
        }
 
        Double ApprovedQuantitySmall = entity.getApprovedQuantitySmall();
        if (ApprovedQuantitySmall != null) {
            stmt.bindDouble(14, ApprovedQuantitySmall);
        }
 
        Double ApprovedBasicUnitQuantity = entity.getApprovedBasicUnitQuantity();
        if (ApprovedBasicUnitQuantity != null) {
            stmt.bindDouble(15, ApprovedBasicUnitQuantity);
        }
 
        Double MissedQuantityBig = entity.getMissedQuantityBig();
        if (MissedQuantityBig != null) {
            stmt.bindDouble(16, MissedQuantityBig);
        }
 
        Double MissedQuantityMedium = entity.getMissedQuantityMedium();
        if (MissedQuantityMedium != null) {
            stmt.bindDouble(17, MissedQuantityMedium);
        }
 
        Double MissedQuantitySmall = entity.getMissedQuantitySmall();
        if (MissedQuantitySmall != null) {
            stmt.bindDouble(18, MissedQuantitySmall);
        }
 
        Double MissedBasicUnitQuantity = entity.getMissedBasicUnitQuantity();
        if (MissedBasicUnitQuantity != null) {
            stmt.bindDouble(19, MissedBasicUnitQuantity);
        }
 
        Double TotalLineAmount = entity.getTotalLineAmount();
        if (TotalLineAmount != null) {
            stmt.bindDouble(20, TotalLineAmount);
        }
 
        Double DiscountAmount = entity.getDiscountAmount();
        if (DiscountAmount != null) {
            stmt.bindDouble(21, DiscountAmount);
        }
 
        Double DiscountPercentage = entity.getDiscountPercentage();
        if (DiscountPercentage != null) {
            stmt.bindDouble(22, DiscountPercentage);
        }
 
        Double StockQuantity = entity.getStockQuantity();
        if (StockQuantity != null) {
            stmt.bindDouble(23, StockQuantity);
        }
 
        String ItemName = entity.getItemName();
        if (ItemName != null) {
            stmt.bindString(24, ItemName);
        }
 
        String ItemAltName = entity.getItemAltName();
        if (ItemAltName != null) {
            stmt.bindString(25, ItemAltName);
        }
 
        String ReasonCode = entity.getReasonCode();
        if (ReasonCode != null) {
            stmt.bindString(26, ReasonCode);
        }
 
        String ReasonAffectStock = entity.getReasonAffectStock();
        if (ReasonAffectStock != null) {
            stmt.bindString(27, ReasonAffectStock);
        }
 
        String ItemLot = entity.getItemLot();
        if (ItemLot != null) {
            stmt.bindString(28, ItemLot);
        }
 
        java.util.Date ItemExpiryDate = entity.getItemExpiryDate();
        if (ItemExpiryDate != null) {
            stmt.bindLong(29, ItemExpiryDate.getTime());
        }
 
        Double ItemTaxPercentage = entity.getItemTaxPercentage();
        if (ItemTaxPercentage != null) {
            stmt.bindDouble(30, ItemTaxPercentage);
        }
        stmt.bindLong(31, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MovementDetails readEntity(Cursor cursor, int offset) {
        MovementDetails entity = new MovementDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // MovementCode
            cursor.getInt(offset + 2), // LineID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ItemCode
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // QuantityBig
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // QuantityMedium
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // QuantitySmall
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // BasicUnitQuantity
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // PriceBig
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // PriceMedium
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // PriceSmall
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // ApprovedQuantityBig
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // ApprovedQuantityMedium
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // ApprovedQuantitySmall
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // ApprovedBasicUnitQuantity
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // MissedQuantityBig
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // MissedQuantityMedium
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // MissedQuantitySmall
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // MissedBasicUnitQuantity
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // TotalLineAmount
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // DiscountAmount
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // DiscountPercentage
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // StockQuantity
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ItemName
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // ItemAltName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ReasonCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ReasonAffectStock
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ItemLot
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // ItemExpiryDate
            cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29), // ItemTaxPercentage
            new java.util.Date(cursor.getLong(offset + 30)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MovementDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMovementCode(cursor.getString(offset + 1));
        entity.setLineID(cursor.getInt(offset + 2));
        entity.setItemCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuantityBig(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setQuantityMedium(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setQuantitySmall(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setBasicUnitQuantity(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setPriceBig(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setPriceMedium(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setPriceSmall(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setApprovedQuantityBig(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setApprovedQuantityMedium(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setApprovedQuantitySmall(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setApprovedBasicUnitQuantity(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setMissedQuantityBig(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setMissedQuantityMedium(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setMissedQuantitySmall(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setMissedBasicUnitQuantity(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setTotalLineAmount(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setDiscountAmount(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setDiscountPercentage(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setStockQuantity(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setItemName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setItemAltName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setReasonCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setReasonAffectStock(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setItemLot(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setItemExpiryDate(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setItemTaxPercentage(cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 30)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MovementDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MovementDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
