package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.CollectionDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CollectionDetails.
*/
public class CollectionDetailsDao extends AbstractDao<CollectionDetails, Long> {

    public static final String TABLENAME = "CollectionDetails";

    /**
     * Properties of entity CollectionDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CollectionCode = new Property(1, String.class, "CollectionCode", false, "CollectionCode");
        public final static Property LineID = new Property(2, int.class, "LineID", false, "LineID");
        public final static Property DivisionCode = new Property(3, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CollectionDetailType = new Property(4, Integer.class, "CollectionDetailType", false, "CollectionDetailType");
        public final static Property CollectionAmount = new Property(5, Double.class, "CollectionAmount", false, "CollectionAmount");
        public final static Property CurrencyCode = new Property(6, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property CurrencyRate = new Property(7, Double.class, "CurrencyRate", false, "CurrencyRate");
        public final static Property CheckCode = new Property(8, String.class, "CheckCode", false, "CheckCode");
        public final static Property CheckDate = new Property(9, java.util.Date.class, "CheckDate", false, "CheckDate");
        public final static Property BankCode = new Property(10, String.class, "BankCode", false, "BankCode");
        public final static Property BankDescription = new Property(11, String.class, "BankDescription", false, "BankDescription");
        public final static Property BankBranchCode = new Property(12, String.class, "BankBranchCode", false, "BankBranchCode");
        public final static Property StampDate = new Property(13, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public CollectionDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CollectionDetails' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CollectionCode' TEXT NOT NULL ," + // 1: CollectionCode
                "'LineID' INTEGER NOT NULL ," + // 2: LineID
                "'DivisionCode' TEXT," + // 3: DivisionCode
                "'CollectionDetailType' INTEGER," + // 4: CollectionDetailType
                "'CollectionAmount' REAL," + // 5: CollectionAmount
                "'CurrencyCode' TEXT," + // 6: CurrencyCode
                "'CurrencyRate' REAL," + // 7: CurrencyRate
                "'CheckCode' TEXT," + // 8: CheckCode
                "'CheckDate' INTEGER," + // 9: CheckDate
                "'BankCode' TEXT," + // 10: BankCode
                "'BankDescription' TEXT," + // 11: BankDescription
                "'BankBranchCode' TEXT," + // 12: BankBranchCode
                "'StampDate' INTEGER NOT NULL );"); // 13: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CollectionDetails'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CollectionDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCollectionCode());
        stmt.bindLong(3, entity.getLineID());
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(4, DivisionCode);
        }
 
        Integer CollectionDetailType = entity.getCollectionDetailType();
        if (CollectionDetailType != null) {
            stmt.bindLong(5, CollectionDetailType);
        }
 
        Double CollectionAmount = entity.getCollectionAmount();
        if (CollectionAmount != null) {
            stmt.bindDouble(6, CollectionAmount);
        }
 
        String CurrencyCode = entity.getCurrencyCode();
        if (CurrencyCode != null) {
            stmt.bindString(7, CurrencyCode);
        }
 
        Double CurrencyRate = entity.getCurrencyRate();
        if (CurrencyRate != null) {
            stmt.bindDouble(8, CurrencyRate);
        }
 
        String CheckCode = entity.getCheckCode();
        if (CheckCode != null) {
            stmt.bindString(9, CheckCode);
        }
 
        java.util.Date CheckDate = entity.getCheckDate();
        if (CheckDate != null) {
            stmt.bindLong(10, CheckDate.getTime());
        }
 
        String BankCode = entity.getBankCode();
        if (BankCode != null) {
            stmt.bindString(11, BankCode);
        }
 
        String BankDescription = entity.getBankDescription();
        if (BankDescription != null) {
            stmt.bindString(12, BankDescription);
        }
 
        String BankBranchCode = entity.getBankBranchCode();
        if (BankBranchCode != null) {
            stmt.bindString(13, BankBranchCode);
        }
        stmt.bindLong(14, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CollectionDetails readEntity(Cursor cursor, int offset) {
        CollectionDetails entity = new CollectionDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CollectionCode
            cursor.getInt(offset + 2), // LineID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DivisionCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // CollectionDetailType
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // CollectionAmount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CurrencyCode
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // CurrencyRate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CheckCode
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // CheckDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // BankCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BankDescription
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // BankBranchCode
            new java.util.Date(cursor.getLong(offset + 13)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CollectionDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCollectionCode(cursor.getString(offset + 1));
        entity.setLineID(cursor.getInt(offset + 2));
        entity.setDivisionCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCollectionDetailType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCollectionAmount(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCurrencyCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCurrencyRate(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setCheckCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCheckDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setBankCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBankDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBankBranchCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 13)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CollectionDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CollectionDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
