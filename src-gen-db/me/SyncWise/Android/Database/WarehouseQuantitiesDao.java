package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.WarehouseQuantities;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WarehouseQuantities.
*/
public class WarehouseQuantitiesDao extends AbstractDao<WarehouseQuantities, Long> {

    public static final String TABLENAME = "WarehouseQuantities";

    /**
     * Properties of entity WarehouseQuantities.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WarehouseCode = new Property(1, String.class, "WarehouseCode", false, "WarehouseCode");
        public final static Property ItemCode = new Property(2, String.class, "ItemCode", false, "ItemCode");
        public final static Property DivisonCode = new Property(3, String.class, "DivisonCode", false, "DivisonCode");
        public final static Property CompanyCode = new Property(4, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property QuantityBig = new Property(5, Double.class, "QuantityBig", false, "QuantityBig");
        public final static Property QuantityMedium = new Property(6, Double.class, "QuantityMedium", false, "QuantityMedium");
        public final static Property QuantitySmall = new Property(7, Double.class, "QuantitySmall", false, "QuantitySmall");
        public final static Property MinimumQuantity = new Property(8, Double.class, "MinimumQuantity", false, "MinimumQuantity");
        public final static Property StampDate = new Property(9, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public WarehouseQuantitiesDao(DaoConfig config) {
        super(config);
    }
    
    public WarehouseQuantitiesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WarehouseQuantities' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'WarehouseCode' TEXT NOT NULL ," + // 1: WarehouseCode
                "'ItemCode' TEXT NOT NULL ," + // 2: ItemCode
                "'DivisonCode' TEXT NOT NULL ," + // 3: DivisonCode
                "'CompanyCode' TEXT NOT NULL ," + // 4: CompanyCode
                "'QuantityBig' REAL," + // 5: QuantityBig
                "'QuantityMedium' REAL," + // 6: QuantityMedium
                "'QuantitySmall' REAL," + // 7: QuantitySmall
                "'MinimumQuantity' REAL," + // 8: MinimumQuantity
                "'StampDate' INTEGER NOT NULL );"); // 9: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WarehouseQuantities'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WarehouseQuantities entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getWarehouseCode());
        stmt.bindString(3, entity.getItemCode());
        stmt.bindString(4, entity.getDivisonCode());
        stmt.bindString(5, entity.getCompanyCode());
 
        Double QuantityBig = entity.getQuantityBig();
        if (QuantityBig != null) {
            stmt.bindDouble(6, QuantityBig);
        }
 
        Double QuantityMedium = entity.getQuantityMedium();
        if (QuantityMedium != null) {
            stmt.bindDouble(7, QuantityMedium);
        }
 
        Double QuantitySmall = entity.getQuantitySmall();
        if (QuantitySmall != null) {
            stmt.bindDouble(8, QuantitySmall);
        }
 
        Double MinimumQuantity = entity.getMinimumQuantity();
        if (MinimumQuantity != null) {
            stmt.bindDouble(9, MinimumQuantity);
        }
        stmt.bindLong(10, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WarehouseQuantities readEntity(Cursor cursor, int offset) {
        WarehouseQuantities entity = new WarehouseQuantities( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // WarehouseCode
            cursor.getString(offset + 2), // ItemCode
            cursor.getString(offset + 3), // DivisonCode
            cursor.getString(offset + 4), // CompanyCode
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // QuantityBig
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // QuantityMedium
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // QuantitySmall
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // MinimumQuantity
            new java.util.Date(cursor.getLong(offset + 9)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WarehouseQuantities entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWarehouseCode(cursor.getString(offset + 1));
        entity.setItemCode(cursor.getString(offset + 2));
        entity.setDivisonCode(cursor.getString(offset + 3));
        entity.setCompanyCode(cursor.getString(offset + 4));
        entity.setQuantityBig(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setQuantityMedium(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setQuantitySmall(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setMinimumQuantity(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WarehouseQuantities entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WarehouseQuantities entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
