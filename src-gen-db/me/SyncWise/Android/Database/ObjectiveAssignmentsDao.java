package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ObjectiveAssignments;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ObjectiveAssignments.
*/
public class ObjectiveAssignmentsDao extends AbstractDao<ObjectiveAssignments, Long> {

    public static final String TABLENAME = "ObjectiveAssignments";

    /**
     * Properties of entity ObjectiveAssignments.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectiveID = new Property(1, Long.class, "ObjectiveID", false, "ObjectiveID");
        public final static Property AssignmentCode = new Property(2, String.class, "AssignmentCode", false, "AssignmentCode");
        public final static Property AssignmentType = new Property(3, Integer.class, "AssignmentType", false, "AssignmentType");
        public final static Property AssignmentSource = new Property(4, String.class, "AssignmentSource", false, "AssignmentSource");
        public final static Property DivisionCode = new Property(5, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(6, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property IsProcessed = new Property(7, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(8, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ObjectiveAssignmentsDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectiveAssignmentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ObjectiveAssignments' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ObjectiveID' INTEGER," + // 1: ObjectiveID
                "'AssignmentCode' TEXT," + // 2: AssignmentCode
                "'AssignmentType' INTEGER," + // 3: AssignmentType
                "'AssignmentSource' TEXT," + // 4: AssignmentSource
                "'DivisionCode' TEXT," + // 5: DivisionCode
                "'CompanyCode' TEXT," + // 6: CompanyCode
                "'IsProcessed' INTEGER NOT NULL ," + // 7: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 8: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ObjectiveAssignments'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectiveAssignments entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ObjectiveID = entity.getObjectiveID();
        if (ObjectiveID != null) {
            stmt.bindLong(2, ObjectiveID);
        }
 
        String AssignmentCode = entity.getAssignmentCode();
        if (AssignmentCode != null) {
            stmt.bindString(3, AssignmentCode);
        }
 
        Integer AssignmentType = entity.getAssignmentType();
        if (AssignmentType != null) {
            stmt.bindLong(4, AssignmentType);
        }
 
        String AssignmentSource = entity.getAssignmentSource();
        if (AssignmentSource != null) {
            stmt.bindString(5, AssignmentSource);
        }
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(6, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(7, CompanyCode);
        }
        stmt.bindLong(8, entity.getIsProcessed());
        stmt.bindLong(9, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectiveAssignments readEntity(Cursor cursor, int offset) {
        ObjectiveAssignments entity = new ObjectiveAssignments( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ObjectiveID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AssignmentCode
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // AssignmentType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AssignmentSource
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DivisionCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CompanyCode
            cursor.getInt(offset + 7), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 8)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectiveAssignments entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectiveID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAssignmentCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAssignmentType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAssignmentSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDivisionCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompanyCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsProcessed(cursor.getInt(offset + 7));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectiveAssignments entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectiveAssignments entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
