package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.CollectionImages;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CollectionImages.
*/
public class CollectionImagesDao extends AbstractDao<CollectionImages, Long> {

    public static final String TABLENAME = "CollectionImages";

    /**
     * Properties of entity CollectionImages.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LineID = new Property(1, int.class, "LineID", false, "LineID");
        public final static Property CollectionCode = new Property(2, String.class, "CollectionCode", false, "CollectionCode");
        public final static Property MoneyCategoryCode = new Property(3, String.class, "MoneyCategoryCode", false, "MoneyCategoryCode");
        public final static Property Value = new Property(4, Integer.class, "Value", false, "Value");
        public final static Property MoneyImageName = new Property(5, String.class, "MoneyImageName", false, "MoneyImageName");
        public final static Property ImageStatus = new Property(6, int.class, "ImageStatus", false, "ImageStatus");
        public final static Property IsProcessed = new Property(7, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(8, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public CollectionImagesDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionImagesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CollectionImages' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LineID' INTEGER NOT NULL ," + // 1: LineID
                "'CollectionCode' TEXT NOT NULL ," + // 2: CollectionCode
                "'MoneyCategoryCode' TEXT," + // 3: MoneyCategoryCode
                "'Value' INTEGER," + // 4: Value
                "'MoneyImageName' TEXT," + // 5: MoneyImageName
                "'ImageStatus' INTEGER NOT NULL ," + // 6: ImageStatus
                "'IsProcessed' INTEGER NOT NULL ," + // 7: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 8: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CollectionImages'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CollectionImages entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLineID());
        stmt.bindString(3, entity.getCollectionCode());
 
        String MoneyCategoryCode = entity.getMoneyCategoryCode();
        if (MoneyCategoryCode != null) {
            stmt.bindString(4, MoneyCategoryCode);
        }
 
        Integer Value = entity.getValue();
        if (Value != null) {
            stmt.bindLong(5, Value);
        }
 
        String MoneyImageName = entity.getMoneyImageName();
        if (MoneyImageName != null) {
            stmt.bindString(6, MoneyImageName);
        }
        stmt.bindLong(7, entity.getImageStatus());
        stmt.bindLong(8, entity.getIsProcessed());
        stmt.bindLong(9, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CollectionImages readEntity(Cursor cursor, int offset) {
        CollectionImages entity = new CollectionImages( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // LineID
            cursor.getString(offset + 2), // CollectionCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MoneyCategoryCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Value
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MoneyImageName
            cursor.getInt(offset + 6), // ImageStatus
            cursor.getInt(offset + 7), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 8)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CollectionImages entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLineID(cursor.getInt(offset + 1));
        entity.setCollectionCode(cursor.getString(offset + 2));
        entity.setMoneyCategoryCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValue(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMoneyImageName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageStatus(cursor.getInt(offset + 6));
        entity.setIsProcessed(cursor.getInt(offset + 7));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CollectionImages entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CollectionImages entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
