package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.TransactionSequences;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TransactionSequences.
*/
public class TransactionSequencesDao extends AbstractDao<TransactionSequences, Long> {

    public static final String TABLENAME = "TransactionSequences";

    /**
     * Properties of entity TransactionSequences.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "UserCode", false, "UserCode");
        public final static Property CompanyCode = new Property(2, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property SalesOrder = new Property(3, Integer.class, "SalesOrder", false, "SalesOrder");
        public final static Property SalesInvoice = new Property(4, Integer.class, "SalesInvoice", false, "SalesInvoice");
        public final static Property SalesReturn = new Property(5, Integer.class, "SalesReturn", false, "SalesReturn");
        public final static Property SalesRFR = new Property(6, Integer.class, "SalesRFR", false, "SalesRFR");
        public final static Property Collection = new Property(7, Integer.class, "Collection", false, "Collection");
        public final static Property Movements = new Property(8, Integer.class, "Movements", false, "Movements");
        public final static Property ClientStockCount = new Property(9, Integer.class, "ClientStockCount", false, "ClientStockCount");
        public final static Property StampDate = new Property(10, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public TransactionSequencesDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionSequencesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TransactionSequences' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UserCode' TEXT NOT NULL ," + // 1: UserCode
                "'CompanyCode' TEXT NOT NULL ," + // 2: CompanyCode
                "'SalesOrder' INTEGER," + // 3: SalesOrder
                "'SalesInvoice' INTEGER," + // 4: SalesInvoice
                "'SalesReturn' INTEGER," + // 5: SalesReturn
                "'SalesRFR' INTEGER," + // 6: SalesRFR
                "'Collection' INTEGER," + // 7: Collection
                "'Movements' INTEGER," + // 8: Movements
                "'ClientStockCount' INTEGER," + // 9: ClientStockCount
                "'StampDate' INTEGER NOT NULL );"); // 10: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TransactionSequences'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransactionSequences entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserCode());
        stmt.bindString(3, entity.getCompanyCode());
 
        Integer SalesOrder = entity.getSalesOrder();
        if (SalesOrder != null) {
            stmt.bindLong(4, SalesOrder);
        }
 
        Integer SalesInvoice = entity.getSalesInvoice();
        if (SalesInvoice != null) {
            stmt.bindLong(5, SalesInvoice);
        }
 
        Integer SalesReturn = entity.getSalesReturn();
        if (SalesReturn != null) {
            stmt.bindLong(6, SalesReturn);
        }
 
        Integer SalesRFR = entity.getSalesRFR();
        if (SalesRFR != null) {
            stmt.bindLong(7, SalesRFR);
        }
 
        Integer Collection = entity.getCollection();
        if (Collection != null) {
            stmt.bindLong(8, Collection);
        }
 
        Integer Movements = entity.getMovements();
        if (Movements != null) {
            stmt.bindLong(9, Movements);
        }
 
        Integer ClientStockCount = entity.getClientStockCount();
        if (ClientStockCount != null) {
            stmt.bindLong(10, ClientStockCount);
        }
        stmt.bindLong(11, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransactionSequences readEntity(Cursor cursor, int offset) {
        TransactionSequences entity = new TransactionSequences( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // UserCode
            cursor.getString(offset + 2), // CompanyCode
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // SalesOrder
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // SalesInvoice
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // SalesReturn
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // SalesRFR
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Collection
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // Movements
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // ClientStockCount
            new java.util.Date(cursor.getLong(offset + 10)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransactionSequences entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.getString(offset + 1));
        entity.setCompanyCode(cursor.getString(offset + 2));
        entity.setSalesOrder(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSalesInvoice(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSalesReturn(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSalesRFR(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCollection(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMovements(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setClientStockCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TransactionSequences entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TransactionSequences entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
