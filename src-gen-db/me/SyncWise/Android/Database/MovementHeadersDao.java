package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.MovementHeaders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MovementHeaders.
*/
public class MovementHeadersDao extends AbstractDao<MovementHeaders, Long> {

    public static final String TABLENAME = "MovementHeaders";

    /**
     * Properties of entity MovementHeaders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MovementCode = new Property(1, String.class, "MovementCode", false, "MovementCode");
        public final static Property DivisionCode = new Property(2, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(3, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property SupervisorCode = new Property(4, String.class, "SupervisorCode", false, "SupervisorCode");
        public final static Property WarehouseKeeperCode = new Property(5, String.class, "WarehouseKeeperCode", false, "WarehouseKeeperCode");
        public final static Property UserCode = new Property(6, String.class, "UserCode", false, "UserCode");
        public final static Property WarehouseCode = new Property(7, String.class, "WarehouseCode", false, "WarehouseCode");
        public final static Property MovementType = new Property(8, Integer.class, "MovementType", false, "MovementType");
        public final static Property MovementDate = new Property(9, java.util.Date.class, "MovementDate", false, "MovementDate");
        public final static Property GrossAmount = new Property(10, Double.class, "GrossAmount", false, "GrossAmount");
        public final static Property DiscAmount = new Property(11, Double.class, "DiscAmount", false, "DiscAmount");
        public final static Property NetAmount = new Property(12, Double.class, "NetAmount", false, "NetAmount");
        public final static Property TaxAmount = new Property(13, Double.class, "TaxAmount", false, "TaxAmount");
        public final static Property TotalTaxAmount = new Property(14, Double.class, "TotalTaxAmount", false, "TotalTaxAmount");
        public final static Property MovementStatus = new Property(15, Integer.class, "MovementStatus", false, "MovementStatus");
        public final static Property Source = new Property(16, String.class, "Source", false, "Source");
        public final static Property TransferType = new Property(17, Integer.class, "TransferType", false, "TransferType");
        public final static Property Destination = new Property(18, String.class, "Destination", false, "Destination");
        public final static Property VehicleCode = new Property(19, String.class, "VehicleCode", false, "VehicleCode");
        public final static Property MovementReferenceCode = new Property(20, String.class, "MovementReferenceCode", false, "MovementReferenceCode");
        public final static Property PasswordCode = new Property(21, String.class, "PasswordCode", false, "PasswordCode");
        public final static Property IsProcessed = new Property(22, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(23, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public MovementHeadersDao(DaoConfig config) {
        super(config);
    }
    
    public MovementHeadersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MovementHeaders' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MovementCode' TEXT NOT NULL UNIQUE ," + // 1: MovementCode
                "'DivisionCode' TEXT," + // 2: DivisionCode
                "'CompanyCode' TEXT," + // 3: CompanyCode
                "'SupervisorCode' TEXT," + // 4: SupervisorCode
                "'WarehouseKeeperCode' TEXT," + // 5: WarehouseKeeperCode
                "'UserCode' TEXT," + // 6: UserCode
                "'WarehouseCode' TEXT," + // 7: WarehouseCode
                "'MovementType' INTEGER," + // 8: MovementType
                "'MovementDate' INTEGER," + // 9: MovementDate
                "'GrossAmount' REAL," + // 10: GrossAmount
                "'DiscAmount' REAL," + // 11: DiscAmount
                "'NetAmount' REAL," + // 12: NetAmount
                "'TaxAmount' REAL," + // 13: TaxAmount
                "'TotalTaxAmount' REAL," + // 14: TotalTaxAmount
                "'MovementStatus' INTEGER," + // 15: MovementStatus
                "'Source' TEXT," + // 16: Source
                "'TransferType' INTEGER," + // 17: TransferType
                "'Destination' TEXT," + // 18: Destination
                "'VehicleCode' TEXT," + // 19: VehicleCode
                "'MovementReferenceCode' TEXT," + // 20: MovementReferenceCode
                "'PasswordCode' TEXT," + // 21: PasswordCode
                "'IsProcessed' INTEGER NOT NULL ," + // 22: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 23: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MovementHeaders'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MovementHeaders entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMovementCode());
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(3, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(4, CompanyCode);
        }
 
        String SupervisorCode = entity.getSupervisorCode();
        if (SupervisorCode != null) {
            stmt.bindString(5, SupervisorCode);
        }
 
        String WarehouseKeeperCode = entity.getWarehouseKeeperCode();
        if (WarehouseKeeperCode != null) {
            stmt.bindString(6, WarehouseKeeperCode);
        }
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(7, UserCode);
        }
 
        String WarehouseCode = entity.getWarehouseCode();
        if (WarehouseCode != null) {
            stmt.bindString(8, WarehouseCode);
        }
 
        Integer MovementType = entity.getMovementType();
        if (MovementType != null) {
            stmt.bindLong(9, MovementType);
        }
 
        java.util.Date MovementDate = entity.getMovementDate();
        if (MovementDate != null) {
            stmt.bindLong(10, MovementDate.getTime());
        }
 
        Double GrossAmount = entity.getGrossAmount();
        if (GrossAmount != null) {
            stmt.bindDouble(11, GrossAmount);
        }
 
        Double DiscAmount = entity.getDiscAmount();
        if (DiscAmount != null) {
            stmt.bindDouble(12, DiscAmount);
        }
 
        Double NetAmount = entity.getNetAmount();
        if (NetAmount != null) {
            stmt.bindDouble(13, NetAmount);
        }
 
        Double TaxAmount = entity.getTaxAmount();
        if (TaxAmount != null) {
            stmt.bindDouble(14, TaxAmount);
        }
 
        Double TotalTaxAmount = entity.getTotalTaxAmount();
        if (TotalTaxAmount != null) {
            stmt.bindDouble(15, TotalTaxAmount);
        }
 
        Integer MovementStatus = entity.getMovementStatus();
        if (MovementStatus != null) {
            stmt.bindLong(16, MovementStatus);
        }
 
        String Source = entity.getSource();
        if (Source != null) {
            stmt.bindString(17, Source);
        }
 
        Integer TransferType = entity.getTransferType();
        if (TransferType != null) {
            stmt.bindLong(18, TransferType);
        }
 
        String Destination = entity.getDestination();
        if (Destination != null) {
            stmt.bindString(19, Destination);
        }
 
        String VehicleCode = entity.getVehicleCode();
        if (VehicleCode != null) {
            stmt.bindString(20, VehicleCode);
        }
 
        String MovementReferenceCode = entity.getMovementReferenceCode();
        if (MovementReferenceCode != null) {
            stmt.bindString(21, MovementReferenceCode);
        }
 
        String PasswordCode = entity.getPasswordCode();
        if (PasswordCode != null) {
            stmt.bindString(22, PasswordCode);
        }
        stmt.bindLong(23, entity.getIsProcessed());
        stmt.bindLong(24, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MovementHeaders readEntity(Cursor cursor, int offset) {
        MovementHeaders entity = new MovementHeaders( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // MovementCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DivisionCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CompanyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SupervisorCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // WarehouseKeeperCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UserCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // WarehouseCode
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // MovementType
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // MovementDate
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // GrossAmount
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // DiscAmount
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // NetAmount
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // TaxAmount
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // TotalTaxAmount
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // MovementStatus
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Source
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // TransferType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Destination
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // VehicleCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // MovementReferenceCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // PasswordCode
            cursor.getInt(offset + 22), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 23)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MovementHeaders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMovementCode(cursor.getString(offset + 1));
        entity.setDivisionCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSupervisorCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWarehouseKeeperCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWarehouseCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMovementType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMovementDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setGrossAmount(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setDiscAmount(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setNetAmount(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setTaxAmount(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setTotalTaxAmount(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setMovementStatus(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSource(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTransferType(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setDestination(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setVehicleCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMovementReferenceCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPasswordCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIsProcessed(cursor.getInt(offset + 22));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 23)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MovementHeaders entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MovementHeaders entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
