package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ForceSyncJourneys;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ForceSyncJourneys.
*/
public class ForceSyncJourneysDao extends AbstractDao<ForceSyncJourneys, Long> {

    public static final String TABLENAME = "ForceSyncJourneys";

    /**
     * Properties of entity ForceSyncJourneys.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property JourneyCode = new Property(1, String.class, "JourneyCode", false, "JourneyCode");
        public final static Property UserCode = new Property(2, String.class, "UserCode", false, "UserCode");
        public final static Property SyncStatus = new Property(3, Integer.class, "SyncStatus", false, "SyncStatus");
        public final static Property PassCode = new Property(4, String.class, "PassCode", false, "PassCode");
        public final static Property IsProcessed = new Property(5, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(6, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ForceSyncJourneysDao(DaoConfig config) {
        super(config);
    }
    
    public ForceSyncJourneysDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ForceSyncJourneys' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'JourneyCode' TEXT NOT NULL UNIQUE ," + // 1: JourneyCode
                "'UserCode' TEXT," + // 2: UserCode
                "'SyncStatus' INTEGER," + // 3: SyncStatus
                "'PassCode' TEXT," + // 4: PassCode
                "'IsProcessed' INTEGER NOT NULL ," + // 5: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 6: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ForceSyncJourneys'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ForceSyncJourneys entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getJourneyCode());
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(3, UserCode);
        }
 
        Integer SyncStatus = entity.getSyncStatus();
        if (SyncStatus != null) {
            stmt.bindLong(4, SyncStatus);
        }
 
        String PassCode = entity.getPassCode();
        if (PassCode != null) {
            stmt.bindString(5, PassCode);
        }
        stmt.bindLong(6, entity.getIsProcessed());
        stmt.bindLong(7, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ForceSyncJourneys readEntity(Cursor cursor, int offset) {
        ForceSyncJourneys entity = new ForceSyncJourneys( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // JourneyCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserCode
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // SyncStatus
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PassCode
            cursor.getInt(offset + 5), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 6)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ForceSyncJourneys entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJourneyCode(cursor.getString(offset + 1));
        entity.setUserCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSyncStatus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPassCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsProcessed(cursor.getInt(offset + 5));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ForceSyncJourneys entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ForceSyncJourneys entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
