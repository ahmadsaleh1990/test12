package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.PriceLists;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PriceLists.
*/
public class PriceListsDao extends AbstractDao<PriceLists, Long> {

    public static final String TABLENAME = "PriceLists";

    /**
     * Properties of entity PriceLists.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PriceListCode = new Property(1, String.class, "PriceListCode", false, "PriceListCode");
        public final static Property CompanyCode = new Property(2, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property PriceListName = new Property(3, String.class, "PriceListName", false, "PriceListName");
        public final static Property PriceListAltName = new Property(4, String.class, "PriceListAltName", false, "PriceListAltName");
        public final static Property PriceListSource = new Property(5, Integer.class, "PriceListSource", false, "PriceListSource");
        public final static Property StampDate = new Property(6, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public PriceListsDao(DaoConfig config) {
        super(config);
    }
    
    public PriceListsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PriceLists' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PriceListCode' TEXT NOT NULL ," + // 1: PriceListCode
                "'CompanyCode' TEXT NOT NULL ," + // 2: CompanyCode
                "'PriceListName' TEXT," + // 3: PriceListName
                "'PriceListAltName' TEXT," + // 4: PriceListAltName
                "'PriceListSource' INTEGER," + // 5: PriceListSource
                "'StampDate' INTEGER NOT NULL );"); // 6: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PriceLists'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PriceLists entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPriceListCode());
        stmt.bindString(3, entity.getCompanyCode());
 
        String PriceListName = entity.getPriceListName();
        if (PriceListName != null) {
            stmt.bindString(4, PriceListName);
        }
 
        String PriceListAltName = entity.getPriceListAltName();
        if (PriceListAltName != null) {
            stmt.bindString(5, PriceListAltName);
        }
 
        Integer PriceListSource = entity.getPriceListSource();
        if (PriceListSource != null) {
            stmt.bindLong(6, PriceListSource);
        }
        stmt.bindLong(7, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PriceLists readEntity(Cursor cursor, int offset) {
        PriceLists entity = new PriceLists( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // PriceListCode
            cursor.getString(offset + 2), // CompanyCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PriceListName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PriceListAltName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // PriceListSource
            new java.util.Date(cursor.getLong(offset + 6)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PriceLists entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPriceListCode(cursor.getString(offset + 1));
        entity.setCompanyCode(cursor.getString(offset + 2));
        entity.setPriceListName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPriceListAltName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPriceListSource(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PriceLists entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PriceLists entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
