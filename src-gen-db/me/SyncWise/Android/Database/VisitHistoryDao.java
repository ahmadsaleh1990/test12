package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.VisitHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VisitHistory.
*/
public class VisitHistoryDao extends AbstractDao<VisitHistory, Long> {

    public static final String TABLENAME = "VisitHistory";

    /**
     * Properties of entity VisitHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "UserCode", false, "UserCode");
        public final static Property ClientCode = new Property(2, String.class, "ClientCode", false, "ClientCode");
        public final static Property VisitDate = new Property(3, java.util.Date.class, "VisitDate", false, "VisitDate");
        public final static Property DivisionCode = new Property(4, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(5, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property Total = new Property(6, Integer.class, "Total", false, "Total");
        public final static Property BlankVisit = new Property(7, Integer.class, "BlankVisit", false, "BlankVisit");
        public final static Property Objective = new Property(8, Integer.class, "Objective", false, "Objective");
        public final static Property SalesOrder = new Property(9, Integer.class, "SalesOrder", false, "SalesOrder");
        public final static Property SalesInvoice = new Property(10, Integer.class, "SalesInvoice", false, "SalesInvoice");
        public final static Property SalesReturn = new Property(11, Integer.class, "SalesReturn", false, "SalesReturn");
        public final static Property SalesRFR = new Property(12, Integer.class, "SalesRFR", false, "SalesRFR");
        public final static Property Collection = new Property(13, Integer.class, "Collection", false, "Collection");
        public final static Property StampDate = new Property(14, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public VisitHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public VisitHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VisitHistory' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UserCode' TEXT NOT NULL ," + // 1: UserCode
                "'ClientCode' TEXT NOT NULL ," + // 2: ClientCode
                "'VisitDate' INTEGER NOT NULL ," + // 3: VisitDate
                "'DivisionCode' TEXT NOT NULL ," + // 4: DivisionCode
                "'CompanyCode' TEXT NOT NULL ," + // 5: CompanyCode
                "'Total' INTEGER," + // 6: Total
                "'BlankVisit' INTEGER," + // 7: BlankVisit
                "'Objective' INTEGER," + // 8: Objective
                "'SalesOrder' INTEGER," + // 9: SalesOrder
                "'SalesInvoice' INTEGER," + // 10: SalesInvoice
                "'SalesReturn' INTEGER," + // 11: SalesReturn
                "'SalesRFR' INTEGER," + // 12: SalesRFR
                "'Collection' INTEGER," + // 13: Collection
                "'StampDate' INTEGER NOT NULL );"); // 14: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VisitHistory'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VisitHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserCode());
        stmt.bindString(3, entity.getClientCode());
        stmt.bindLong(4, entity.getVisitDate().getTime());
        stmt.bindString(5, entity.getDivisionCode());
        stmt.bindString(6, entity.getCompanyCode());
 
        Integer Total = entity.getTotal();
        if (Total != null) {
            stmt.bindLong(7, Total);
        }
 
        Integer BlankVisit = entity.getBlankVisit();
        if (BlankVisit != null) {
            stmt.bindLong(8, BlankVisit);
        }
 
        Integer Objective = entity.getObjective();
        if (Objective != null) {
            stmt.bindLong(9, Objective);
        }
 
        Integer SalesOrder = entity.getSalesOrder();
        if (SalesOrder != null) {
            stmt.bindLong(10, SalesOrder);
        }
 
        Integer SalesInvoice = entity.getSalesInvoice();
        if (SalesInvoice != null) {
            stmt.bindLong(11, SalesInvoice);
        }
 
        Integer SalesReturn = entity.getSalesReturn();
        if (SalesReturn != null) {
            stmt.bindLong(12, SalesReturn);
        }
 
        Integer SalesRFR = entity.getSalesRFR();
        if (SalesRFR != null) {
            stmt.bindLong(13, SalesRFR);
        }
 
        Integer Collection = entity.getCollection();
        if (Collection != null) {
            stmt.bindLong(14, Collection);
        }
        stmt.bindLong(15, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VisitHistory readEntity(Cursor cursor, int offset) {
        VisitHistory entity = new VisitHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // UserCode
            cursor.getString(offset + 2), // ClientCode
            new java.util.Date(cursor.getLong(offset + 3)), // VisitDate
            cursor.getString(offset + 4), // DivisionCode
            cursor.getString(offset + 5), // CompanyCode
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // Total
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // BlankVisit
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // Objective
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // SalesOrder
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // SalesInvoice
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // SalesReturn
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // SalesRFR
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // Collection
            new java.util.Date(cursor.getLong(offset + 14)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VisitHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.getString(offset + 1));
        entity.setClientCode(cursor.getString(offset + 2));
        entity.setVisitDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDivisionCode(cursor.getString(offset + 4));
        entity.setCompanyCode(cursor.getString(offset + 5));
        entity.setTotal(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBlankVisit(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setObjective(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSalesOrder(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSalesInvoice(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSalesReturn(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSalesRFR(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCollection(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VisitHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VisitHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
