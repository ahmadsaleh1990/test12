package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.PromotionHeaders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PromotionHeaders.
*/
public class PromotionHeadersDao extends AbstractDao<PromotionHeaders, Long> {

    public static final String TABLENAME = "PromotionHeaders";

    /**
     * Properties of entity PromotionHeaders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PromotionID = new Property(1, int.class, "PromotionID", false, "PromotionID");
        public final static Property DivisionCode = new Property(2, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(3, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property PromotionName = new Property(4, String.class, "PromotionName", false, "PromotionName");
        public final static Property PromotionAltName = new Property(5, String.class, "PromotionAltName", false, "PromotionAltName");
        public final static Property PromotionType = new Property(6, Integer.class, "PromotionType", false, "PromotionType");
        public final static Property IsForced = new Property(7, Byte.class, "IsForced", false, "IsForced");
        public final static Property IsActive = new Property(8, Byte.class, "IsActive", false, "IsActive");
        public final static Property StartDate = new Property(9, java.util.Date.class, "StartDate", false, "StartDate");
        public final static Property EndDate = new Property(10, java.util.Date.class, "EndDate", false, "EndDate");
        public final static Property StampDate = new Property(11, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public PromotionHeadersDao(DaoConfig config) {
        super(config);
    }
    
    public PromotionHeadersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PromotionHeaders' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PromotionID' INTEGER NOT NULL UNIQUE ," + // 1: PromotionID
                "'DivisionCode' TEXT," + // 2: DivisionCode
                "'CompanyCode' TEXT," + // 3: CompanyCode
                "'PromotionName' TEXT," + // 4: PromotionName
                "'PromotionAltName' TEXT," + // 5: PromotionAltName
                "'PromotionType' INTEGER," + // 6: PromotionType
                "'IsForced' INTEGER," + // 7: IsForced
                "'IsActive' INTEGER," + // 8: IsActive
                "'StartDate' INTEGER," + // 9: StartDate
                "'EndDate' INTEGER," + // 10: EndDate
                "'StampDate' INTEGER NOT NULL );"); // 11: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PromotionHeaders'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PromotionHeaders entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPromotionID());
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(3, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(4, CompanyCode);
        }
 
        String PromotionName = entity.getPromotionName();
        if (PromotionName != null) {
            stmt.bindString(5, PromotionName);
        }
 
        String PromotionAltName = entity.getPromotionAltName();
        if (PromotionAltName != null) {
            stmt.bindString(6, PromotionAltName);
        }
 
        Integer PromotionType = entity.getPromotionType();
        if (PromotionType != null) {
            stmt.bindLong(7, PromotionType);
        }
 
        Byte IsForced = entity.getIsForced();
        if (IsForced != null) {
            stmt.bindLong(8, IsForced);
        }
 
        Byte IsActive = entity.getIsActive();
        if (IsActive != null) {
            stmt.bindLong(9, IsActive);
        }
 
        java.util.Date StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindLong(10, StartDate.getTime());
        }
 
        java.util.Date EndDate = entity.getEndDate();
        if (EndDate != null) {
            stmt.bindLong(11, EndDate.getTime());
        }
        stmt.bindLong(12, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PromotionHeaders readEntity(Cursor cursor, int offset) {
        PromotionHeaders entity = new PromotionHeaders( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // PromotionID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DivisionCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CompanyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PromotionName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PromotionAltName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // PromotionType
            cursor.isNull(offset + 7) ? null : (byte) cursor.getShort(offset + 7), // IsForced
            cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8), // IsActive
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // StartDate
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // EndDate
            new java.util.Date(cursor.getLong(offset + 11)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PromotionHeaders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPromotionID(cursor.getInt(offset + 1));
        entity.setDivisionCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPromotionName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPromotionAltName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPromotionType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsForced(cursor.isNull(offset + 7) ? null : (byte) cursor.getShort(offset + 7));
        entity.setIsActive(cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8));
        entity.setStartDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setEndDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PromotionHeaders entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PromotionHeaders entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
