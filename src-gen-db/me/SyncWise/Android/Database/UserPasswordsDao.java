package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.UserPasswords;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table UserPasswords.
*/
public class UserPasswordsDao extends AbstractDao<UserPasswords, Long> {

    public static final String TABLENAME = "UserPasswords";

    /**
     * Properties of entity UserPasswords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PasswordCode = new Property(1, String.class, "PasswordCode", false, "PasswordCode");
        public final static Property PasswordType = new Property(2, int.class, "PasswordType", false, "PasswordType");
        public final static Property UserCode = new Property(3, String.class, "UserCode", false, "UserCode");
        public final static Property CompanyCode = new Property(4, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property DestinationUserCode = new Property(5, String.class, "DestinationUserCode", false, "DestinationUserCode");
        public final static Property DestinationCompanyCode = new Property(6, String.class, "DestinationCompanyCode", false, "DestinationCompanyCode");
        public final static Property TransactionHeaderType = new Property(7, Integer.class, "TransactionHeaderType", false, "TransactionHeaderType");
        public final static Property TransactionDetailType = new Property(8, Integer.class, "TransactionDetailType", false, "TransactionDetailType");
        public final static Property StartTime = new Property(9, java.util.Date.class, "StartTime", false, "StartTime");
        public final static Property EndTime = new Property(10, java.util.Date.class, "EndTime", false, "EndTime");
        public final static Property IsProcessed = new Property(11, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(12, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public UserPasswordsDao(DaoConfig config) {
        super(config);
    }
    
    public UserPasswordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UserPasswords' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PasswordCode' TEXT NOT NULL ," + // 1: PasswordCode
                "'PasswordType' INTEGER NOT NULL ," + // 2: PasswordType
                "'UserCode' TEXT NOT NULL ," + // 3: UserCode
                "'CompanyCode' TEXT NOT NULL ," + // 4: CompanyCode
                "'DestinationUserCode' TEXT NOT NULL ," + // 5: DestinationUserCode
                "'DestinationCompanyCode' TEXT NOT NULL ," + // 6: DestinationCompanyCode
                "'TransactionHeaderType' INTEGER," + // 7: TransactionHeaderType
                "'TransactionDetailType' INTEGER," + // 8: TransactionDetailType
                "'StartTime' INTEGER," + // 9: StartTime
                "'EndTime' INTEGER," + // 10: EndTime
                "'IsProcessed' INTEGER NOT NULL ," + // 11: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 12: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UserPasswords'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserPasswords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPasswordCode());
        stmt.bindLong(3, entity.getPasswordType());
        stmt.bindString(4, entity.getUserCode());
        stmt.bindString(5, entity.getCompanyCode());
        stmt.bindString(6, entity.getDestinationUserCode());
        stmt.bindString(7, entity.getDestinationCompanyCode());
 
        Integer TransactionHeaderType = entity.getTransactionHeaderType();
        if (TransactionHeaderType != null) {
            stmt.bindLong(8, TransactionHeaderType);
        }
 
        Integer TransactionDetailType = entity.getTransactionDetailType();
        if (TransactionDetailType != null) {
            stmt.bindLong(9, TransactionDetailType);
        }
 
        java.util.Date StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindLong(10, StartTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(11, EndTime.getTime());
        }
        stmt.bindLong(12, entity.getIsProcessed());
        stmt.bindLong(13, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserPasswords readEntity(Cursor cursor, int offset) {
        UserPasswords entity = new UserPasswords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // PasswordCode
            cursor.getInt(offset + 2), // PasswordType
            cursor.getString(offset + 3), // UserCode
            cursor.getString(offset + 4), // CompanyCode
            cursor.getString(offset + 5), // DestinationUserCode
            cursor.getString(offset + 6), // DestinationCompanyCode
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // TransactionHeaderType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // TransactionDetailType
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // StartTime
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // EndTime
            cursor.getInt(offset + 11), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 12)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserPasswords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPasswordCode(cursor.getString(offset + 1));
        entity.setPasswordType(cursor.getInt(offset + 2));
        entity.setUserCode(cursor.getString(offset + 3));
        entity.setCompanyCode(cursor.getString(offset + 4));
        entity.setDestinationUserCode(cursor.getString(offset + 5));
        entity.setDestinationCompanyCode(cursor.getString(offset + 6));
        entity.setTransactionHeaderType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTransactionDetailType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStartTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setEndTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setIsProcessed(cursor.getInt(offset + 11));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserPasswords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserPasswords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
