package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Units;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Units.
*/
public class UnitsDao extends AbstractDao<Units, Long> {

    public static final String TABLENAME = "Units";

    /**
     * Properties of entity Units.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UnitCode = new Property(1, String.class, "UnitCode", false, "UnitCode");
        public final static Property UnitBigDescription = new Property(2, String.class, "UnitBigDescription", false, "UnitBigDescription");
        public final static Property UnitBigAltDescription = new Property(3, String.class, "UnitBigAltDescription", false, "UnitBigAltDescription");
        public final static Property UnitMediumDescription = new Property(4, String.class, "UnitMediumDescription", false, "UnitMediumDescription");
        public final static Property UnitMediumAltDescription = new Property(5, String.class, "UnitMediumAltDescription", false, "UnitMediumAltDescription");
        public final static Property UnitSmallDescription = new Property(6, String.class, "UnitSmallDescription", false, "UnitSmallDescription");
        public final static Property UnitSmallAltDescription = new Property(7, String.class, "UnitSmallAltDescription", false, "UnitSmallAltDescription");
        public final static Property StampDate = new Property(8, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public UnitsDao(DaoConfig config) {
        super(config);
    }
    
    public UnitsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Units' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UnitCode' TEXT NOT NULL UNIQUE ," + // 1: UnitCode
                "'UnitBigDescription' TEXT," + // 2: UnitBigDescription
                "'UnitBigAltDescription' TEXT," + // 3: UnitBigAltDescription
                "'UnitMediumDescription' TEXT," + // 4: UnitMediumDescription
                "'UnitMediumAltDescription' TEXT," + // 5: UnitMediumAltDescription
                "'UnitSmallDescription' TEXT," + // 6: UnitSmallDescription
                "'UnitSmallAltDescription' TEXT," + // 7: UnitSmallAltDescription
                "'StampDate' INTEGER NOT NULL );"); // 8: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Units'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Units entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUnitCode());
 
        String UnitBigDescription = entity.getUnitBigDescription();
        if (UnitBigDescription != null) {
            stmt.bindString(3, UnitBigDescription);
        }
 
        String UnitBigAltDescription = entity.getUnitBigAltDescription();
        if (UnitBigAltDescription != null) {
            stmt.bindString(4, UnitBigAltDescription);
        }
 
        String UnitMediumDescription = entity.getUnitMediumDescription();
        if (UnitMediumDescription != null) {
            stmt.bindString(5, UnitMediumDescription);
        }
 
        String UnitMediumAltDescription = entity.getUnitMediumAltDescription();
        if (UnitMediumAltDescription != null) {
            stmt.bindString(6, UnitMediumAltDescription);
        }
 
        String UnitSmallDescription = entity.getUnitSmallDescription();
        if (UnitSmallDescription != null) {
            stmt.bindString(7, UnitSmallDescription);
        }
 
        String UnitSmallAltDescription = entity.getUnitSmallAltDescription();
        if (UnitSmallAltDescription != null) {
            stmt.bindString(8, UnitSmallAltDescription);
        }
        stmt.bindLong(9, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Units readEntity(Cursor cursor, int offset) {
        Units entity = new Units( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // UnitCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UnitBigDescription
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UnitBigAltDescription
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UnitMediumDescription
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UnitMediumAltDescription
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UnitSmallDescription
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UnitSmallAltDescription
            new java.util.Date(cursor.getLong(offset + 8)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Units entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnitCode(cursor.getString(offset + 1));
        entity.setUnitBigDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnitBigAltDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitMediumDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnitMediumAltDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnitSmallDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnitSmallAltDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Units entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Units entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
