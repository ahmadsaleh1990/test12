package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.TargetHeaders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TargetHeaders.
*/
public class TargetHeadersDao extends AbstractDao<TargetHeaders, Long> {

    public static final String TABLENAME = "TargetHeaders";

    /**
     * Properties of entity TargetHeaders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetCode = new Property(1, String.class, "TargetCode", false, "TargetCode");
        public final static Property TargetName = new Property(2, String.class, "TargetName", false, "TargetName");
        public final static Property TargetAltName = new Property(3, String.class, "TargetAltName", false, "TargetAltName");
        public final static Property TargetType = new Property(4, Integer.class, "TargetType", false, "TargetType");
        public final static Property TargetValue = new Property(5, Double.class, "TargetValue", false, "TargetValue");
        public final static Property DivisionCode = new Property(6, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(7, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property StartDate = new Property(8, java.util.Date.class, "StartDate", false, "StartDate");
        public final static Property EndDate = new Property(9, java.util.Date.class, "EndDate", false, "EndDate");
        public final static Property StampDate = new Property(10, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public TargetHeadersDao(DaoConfig config) {
        super(config);
    }
    
    public TargetHeadersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TargetHeaders' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TargetCode' TEXT NOT NULL UNIQUE ," + // 1: TargetCode
                "'TargetName' TEXT," + // 2: TargetName
                "'TargetAltName' TEXT," + // 3: TargetAltName
                "'TargetType' INTEGER," + // 4: TargetType
                "'TargetValue' REAL," + // 5: TargetValue
                "'DivisionCode' TEXT," + // 6: DivisionCode
                "'CompanyCode' TEXT," + // 7: CompanyCode
                "'StartDate' INTEGER," + // 8: StartDate
                "'EndDate' INTEGER," + // 9: EndDate
                "'StampDate' INTEGER NOT NULL );"); // 10: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TargetHeaders'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TargetHeaders entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTargetCode());
 
        String TargetName = entity.getTargetName();
        if (TargetName != null) {
            stmt.bindString(3, TargetName);
        }
 
        String TargetAltName = entity.getTargetAltName();
        if (TargetAltName != null) {
            stmt.bindString(4, TargetAltName);
        }
 
        Integer TargetType = entity.getTargetType();
        if (TargetType != null) {
            stmt.bindLong(5, TargetType);
        }
 
        Double TargetValue = entity.getTargetValue();
        if (TargetValue != null) {
            stmt.bindDouble(6, TargetValue);
        }
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(7, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(8, CompanyCode);
        }
 
        java.util.Date StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindLong(9, StartDate.getTime());
        }
 
        java.util.Date EndDate = entity.getEndDate();
        if (EndDate != null) {
            stmt.bindLong(10, EndDate.getTime());
        }
        stmt.bindLong(11, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TargetHeaders readEntity(Cursor cursor, int offset) {
        TargetHeaders entity = new TargetHeaders( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TargetCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TargetName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TargetAltName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // TargetType
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // TargetValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DivisionCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CompanyCode
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // StartDate
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // EndDate
            new java.util.Date(cursor.getLong(offset + 10)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TargetHeaders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetCode(cursor.getString(offset + 1));
        entity.setTargetName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTargetAltName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTargetType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTargetValue(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setDivisionCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStartDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setEndDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TargetHeaders entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TargetHeaders entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
