package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Visits;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Visits.
*/
public class VisitsDao extends AbstractDao<Visits, Long> {

    public static final String TABLENAME = "Visits";

    /**
     * Properties of entity Visits.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VisitID = new Property(1, long.class, "VisitID", false, "VisitID");
        public final static Property ClientCode = new Property(2, String.class, "ClientCode", false, "ClientCode");
        public final static Property UserCode = new Property(3, String.class, "UserCode", false, "UserCode");
        public final static Property StartDate = new Property(4, java.util.Date.class, "StartDate", false, "StartDate");
        public final static Property EndDate = new Property(5, java.util.Date.class, "EndDate", false, "EndDate");
        public final static Property VisitStatus = new Property(6, Integer.class, "VisitStatus", false, "VisitStatus");
        public final static Property Longitude = new Property(7, String.class, "Longitude", false, "Longitude");
        public final static Property Latitude = new Property(8, String.class, "Latitude", false, "Latitude");
        public final static Property Note = new Property(9, String.class, "Note", false, "Note");
        public final static Property VisitReasonCode = new Property(10, String.class, "VisitReasonCode", false, "VisitReasonCode");
        public final static Property TransactionReasonCode = new Property(11, String.class, "TransactionReasonCode", false, "TransactionReasonCode");
        public final static Property IsBarcode = new Property(12, String.class, "IsBarcode", false, "IsBarcode");
        public final static Property VisitType = new Property(13, String.class, "VisitType", false, "VisitType");
        public final static Property JourneyCode = new Property(14, String.class, "JourneyCode", false, "JourneyCode");
        public final static Property DivisionCode = new Property(15, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(16, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property IsProcessed = new Property(17, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(18, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public VisitsDao(DaoConfig config) {
        super(config);
    }
    
    public VisitsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Visits' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'VisitID' INTEGER NOT NULL UNIQUE ," + // 1: VisitID
                "'ClientCode' TEXT," + // 2: ClientCode
                "'UserCode' TEXT," + // 3: UserCode
                "'StartDate' INTEGER," + // 4: StartDate
                "'EndDate' INTEGER," + // 5: EndDate
                "'VisitStatus' INTEGER," + // 6: VisitStatus
                "'Longitude' TEXT," + // 7: Longitude
                "'Latitude' TEXT," + // 8: Latitude
                "'Note' TEXT," + // 9: Note
                "'VisitReasonCode' TEXT," + // 10: VisitReasonCode
                "'TransactionReasonCode' TEXT," + // 11: TransactionReasonCode
                "'IsBarcode' TEXT," + // 12: IsBarcode
                "'VisitType' TEXT," + // 13: VisitType
                "'JourneyCode' TEXT," + // 14: JourneyCode
                "'DivisionCode' TEXT," + // 15: DivisionCode
                "'CompanyCode' TEXT," + // 16: CompanyCode
                "'IsProcessed' INTEGER NOT NULL ," + // 17: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 18: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Visits'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Visits entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVisitID());
 
        String ClientCode = entity.getClientCode();
        if (ClientCode != null) {
            stmt.bindString(3, ClientCode);
        }
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(4, UserCode);
        }
 
        java.util.Date StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindLong(5, StartDate.getTime());
        }
 
        java.util.Date EndDate = entity.getEndDate();
        if (EndDate != null) {
            stmt.bindLong(6, EndDate.getTime());
        }
 
        Integer VisitStatus = entity.getVisitStatus();
        if (VisitStatus != null) {
            stmt.bindLong(7, VisitStatus);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(8, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(9, Latitude);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(10, Note);
        }
 
        String VisitReasonCode = entity.getVisitReasonCode();
        if (VisitReasonCode != null) {
            stmt.bindString(11, VisitReasonCode);
        }
 
        String TransactionReasonCode = entity.getTransactionReasonCode();
        if (TransactionReasonCode != null) {
            stmt.bindString(12, TransactionReasonCode);
        }
 
        String IsBarcode = entity.getIsBarcode();
        if (IsBarcode != null) {
            stmt.bindString(13, IsBarcode);
        }
 
        String VisitType = entity.getVisitType();
        if (VisitType != null) {
            stmt.bindString(14, VisitType);
        }
 
        String JourneyCode = entity.getJourneyCode();
        if (JourneyCode != null) {
            stmt.bindString(15, JourneyCode);
        }
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(16, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(17, CompanyCode);
        }
        stmt.bindLong(18, entity.getIsProcessed());
        stmt.bindLong(19, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Visits readEntity(Cursor cursor, int offset) {
        Visits entity = new Visits( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // VisitID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ClientCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserCode
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // StartDate
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // EndDate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // VisitStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Longitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Latitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Note
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // VisitReasonCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // TransactionReasonCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // IsBarcode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // VisitType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // JourneyCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // DivisionCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CompanyCode
            cursor.getInt(offset + 17), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 18)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Visits entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVisitID(cursor.getLong(offset + 1));
        entity.setClientCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setEndDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setVisitStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLongitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVisitReasonCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTransactionReasonCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsBarcode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVisitType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setJourneyCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDivisionCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCompanyCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsProcessed(cursor.getInt(offset + 17));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 18)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Visits entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Visits entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
