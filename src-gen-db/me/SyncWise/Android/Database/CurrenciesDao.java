package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Currencies;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Currencies.
*/
public class CurrenciesDao extends AbstractDao<Currencies, Long> {

    public static final String TABLENAME = "Currencies";

    /**
     * Properties of entity Currencies.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CurrencyCode = new Property(1, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property CurrencyName = new Property(2, String.class, "CurrencyName", false, "CurrencyName");
        public final static Property CurrencyAltName = new Property(3, String.class, "CurrencyAltName", false, "CurrencyAltName");
        public final static Property CurrencySymbol = new Property(4, String.class, "CurrencySymbol", false, "CurrencySymbol");
        public final static Property CurrencyRounding = new Property(5, Integer.class, "CurrencyRounding", false, "CurrencyRounding");
        public final static Property CurrencyPriority = new Property(6, Integer.class, "CurrencyPriority", false, "CurrencyPriority");
        public final static Property CurrencyUpperMargin = new Property(7, Double.class, "CurrencyUpperMargin", false, "CurrencyUpperMargin");
        public final static Property CurrencyLowerMargin = new Property(8, Double.class, "CurrencyLowerMargin", false, "CurrencyLowerMargin");
        public final static Property CurrencyRate = new Property(9, Double.class, "CurrencyRate", false, "CurrencyRate");
        public final static Property StampDate = new Property(10, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public CurrenciesDao(DaoConfig config) {
        super(config);
    }
    
    public CurrenciesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Currencies' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CurrencyCode' TEXT NOT NULL UNIQUE ," + // 1: CurrencyCode
                "'CurrencyName' TEXT," + // 2: CurrencyName
                "'CurrencyAltName' TEXT," + // 3: CurrencyAltName
                "'CurrencySymbol' TEXT," + // 4: CurrencySymbol
                "'CurrencyRounding' INTEGER," + // 5: CurrencyRounding
                "'CurrencyPriority' INTEGER," + // 6: CurrencyPriority
                "'CurrencyUpperMargin' REAL," + // 7: CurrencyUpperMargin
                "'CurrencyLowerMargin' REAL," + // 8: CurrencyLowerMargin
                "'CurrencyRate' REAL," + // 9: CurrencyRate
                "'StampDate' INTEGER NOT NULL );"); // 10: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Currencies'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Currencies entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCurrencyCode());
 
        String CurrencyName = entity.getCurrencyName();
        if (CurrencyName != null) {
            stmt.bindString(3, CurrencyName);
        }
 
        String CurrencyAltName = entity.getCurrencyAltName();
        if (CurrencyAltName != null) {
            stmt.bindString(4, CurrencyAltName);
        }
 
        String CurrencySymbol = entity.getCurrencySymbol();
        if (CurrencySymbol != null) {
            stmt.bindString(5, CurrencySymbol);
        }
 
        Integer CurrencyRounding = entity.getCurrencyRounding();
        if (CurrencyRounding != null) {
            stmt.bindLong(6, CurrencyRounding);
        }
 
        Integer CurrencyPriority = entity.getCurrencyPriority();
        if (CurrencyPriority != null) {
            stmt.bindLong(7, CurrencyPriority);
        }
 
        Double CurrencyUpperMargin = entity.getCurrencyUpperMargin();
        if (CurrencyUpperMargin != null) {
            stmt.bindDouble(8, CurrencyUpperMargin);
        }
 
        Double CurrencyLowerMargin = entity.getCurrencyLowerMargin();
        if (CurrencyLowerMargin != null) {
            stmt.bindDouble(9, CurrencyLowerMargin);
        }
 
        Double CurrencyRate = entity.getCurrencyRate();
        if (CurrencyRate != null) {
            stmt.bindDouble(10, CurrencyRate);
        }
        stmt.bindLong(11, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Currencies readEntity(Cursor cursor, int offset) {
        Currencies entity = new Currencies( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CurrencyCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CurrencyName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CurrencyAltName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CurrencySymbol
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // CurrencyRounding
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // CurrencyPriority
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // CurrencyUpperMargin
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // CurrencyLowerMargin
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // CurrencyRate
            new java.util.Date(cursor.getLong(offset + 10)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Currencies entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrencyCode(cursor.getString(offset + 1));
        entity.setCurrencyName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCurrencyAltName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrencySymbol(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrencyRounding(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCurrencyPriority(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCurrencyUpperMargin(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setCurrencyLowerMargin(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setCurrencyRate(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Currencies entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Currencies entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
