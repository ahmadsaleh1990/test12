package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.TransactionDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TransactionDetails.
*/
public class TransactionDetailsDao extends AbstractDao<TransactionDetails, Long> {

    public static final String TABLENAME = "TransactionDetails";

    /**
     * Properties of entity TransactionDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactionCode = new Property(1, String.class, "TransactionCode", false, "TransactionCode");
        public final static Property LineID = new Property(2, int.class, "LineID", false, "LineID");
        public final static Property ItemCode = new Property(3, String.class, "ItemCode", false, "ItemCode");
        public final static Property OrderedType = new Property(4, String.class, "OrderedType", false, "OrderedType");
        public final static Property QuantityBig = new Property(5, Double.class, "QuantityBig", false, "QuantityBig");
        public final static Property QuantityMedium = new Property(6, Double.class, "QuantityMedium", false, "QuantityMedium");
        public final static Property QuantitySmall = new Property(7, Double.class, "QuantitySmall", false, "QuantitySmall");
        public final static Property BasicUnitQuantity = new Property(8, Double.class, "BasicUnitQuantity", false, "BasicUnitQuantity");
        public final static Property ApprovedQuantityBig = new Property(9, Double.class, "ApprovedQuantityBig", false, "ApprovedQuantityBig");
        public final static Property ApprovedQuantityMedium = new Property(10, Double.class, "ApprovedQuantityMedium", false, "ApprovedQuantityMedium");
        public final static Property ApprovedQuantitySmall = new Property(11, Double.class, "ApprovedQuantitySmall", false, "ApprovedQuantitySmall");
        public final static Property ApprovedBasicUnitQuantity = new Property(12, Double.class, "ApprovedBasicUnitQuantity", false, "ApprovedBasicUnitQuantity");
        public final static Property MissedQuantityBig = new Property(13, Double.class, "MissedQuantityBig", false, "MissedQuantityBig");
        public final static Property MissedQuantityMedium = new Property(14, Double.class, "MissedQuantityMedium", false, "MissedQuantityMedium");
        public final static Property MissedQuantitySmall = new Property(15, Double.class, "MissedQuantitySmall", false, "MissedQuantitySmall");
        public final static Property MissedBasicUnitQuantity = new Property(16, Double.class, "MissedBasicUnitQuantity", false, "MissedBasicUnitQuantity");
        public final static Property PriceBig = new Property(17, Double.class, "PriceBig", false, "PriceBig");
        public final static Property PriceMedium = new Property(18, Double.class, "PriceMedium", false, "PriceMedium");
        public final static Property PriceSmall = new Property(19, Double.class, "PriceSmall", false, "PriceSmall");
        public final static Property UserPriceBig = new Property(20, Double.class, "UserPriceBig", false, "UserPriceBig");
        public final static Property UserPriceMedium = new Property(21, Double.class, "UserPriceMedium", false, "UserPriceMedium");
        public final static Property UserPriceSmall = new Property(22, Double.class, "UserPriceSmall", false, "UserPriceSmall");
        public final static Property DiscountPercentage = new Property(23, Double.class, "DiscountPercentage", false, "DiscountPercentage");
        public final static Property DiscountAmount = new Property(24, Double.class, "DiscountAmount", false, "DiscountAmount");
        public final static Property TotalLineAmount = new Property(25, Double.class, "TotalLineAmount", false, "TotalLineAmount");
        public final static Property LineNote = new Property(26, String.class, "LineNote", false, "LineNote");
        public final static Property ItemLot = new Property(27, String.class, "ItemLot", false, "ItemLot");
        public final static Property ReasonCode = new Property(28, String.class, "ReasonCode", false, "ReasonCode");
        public final static Property ItemTaxPercentage = new Property(29, Double.class, "ItemTaxPercentage", false, "ItemTaxPercentage");
        public final static Property ItemName = new Property(30, String.class, "ItemName", false, "ItemName");
        public final static Property ItemAltName = new Property(31, String.class, "ItemAltName", false, "ItemAltName");
        public final static Property ParentLineID = new Property(32, Integer.class, "ParentLineID", false, "ParentLineID");
        public final static Property ItemExpiryDate = new Property(33, java.util.Date.class, "ItemExpiryDate", false, "ItemExpiryDate");
        public final static Property ItemAffectedStock = new Property(34, String.class, "ItemAffectedStock", false, "ItemAffectedStock");
        public final static Property IsInvoiceRelated = new Property(35, Integer.class, "IsInvoiceRelated", false, "IsInvoiceRelated");
        public final static Property IsCompanyRelated = new Property(36, Integer.class, "IsCompanyRelated", false, "IsCompanyRelated");
        public final static Property TaxAmountBig = new Property(37, Double.class, "TaxAmountBig", false, "TaxAmountBig");
        public final static Property TaxAmountMedium = new Property(38, Double.class, "TaxAmountMedium", false, "TaxAmountMedium");
        public final static Property TaxAmountSmall = new Property(39, Double.class, "TaxAmountSmall", false, "TaxAmountSmall");
        public final static Property TotalExiceAmount = new Property(40, Double.class, "TotalExiceAmount", false, "TotalExiceAmount");
        public final static Property ItemMSL = new Property(41, Integer.class, "ItemMSL", false, "ItemMSL");
        public final static Property StampDate = new Property(42, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public TransactionDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TransactionDetails' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TransactionCode' TEXT NOT NULL ," + // 1: TransactionCode
                "'LineID' INTEGER NOT NULL ," + // 2: LineID
                "'ItemCode' TEXT," + // 3: ItemCode
                "'OrderedType' TEXT," + // 4: OrderedType
                "'QuantityBig' REAL," + // 5: QuantityBig
                "'QuantityMedium' REAL," + // 6: QuantityMedium
                "'QuantitySmall' REAL," + // 7: QuantitySmall
                "'BasicUnitQuantity' REAL," + // 8: BasicUnitQuantity
                "'ApprovedQuantityBig' REAL," + // 9: ApprovedQuantityBig
                "'ApprovedQuantityMedium' REAL," + // 10: ApprovedQuantityMedium
                "'ApprovedQuantitySmall' REAL," + // 11: ApprovedQuantitySmall
                "'ApprovedBasicUnitQuantity' REAL," + // 12: ApprovedBasicUnitQuantity
                "'MissedQuantityBig' REAL," + // 13: MissedQuantityBig
                "'MissedQuantityMedium' REAL," + // 14: MissedQuantityMedium
                "'MissedQuantitySmall' REAL," + // 15: MissedQuantitySmall
                "'MissedBasicUnitQuantity' REAL," + // 16: MissedBasicUnitQuantity
                "'PriceBig' REAL," + // 17: PriceBig
                "'PriceMedium' REAL," + // 18: PriceMedium
                "'PriceSmall' REAL," + // 19: PriceSmall
                "'UserPriceBig' REAL," + // 20: UserPriceBig
                "'UserPriceMedium' REAL," + // 21: UserPriceMedium
                "'UserPriceSmall' REAL," + // 22: UserPriceSmall
                "'DiscountPercentage' REAL," + // 23: DiscountPercentage
                "'DiscountAmount' REAL," + // 24: DiscountAmount
                "'TotalLineAmount' REAL," + // 25: TotalLineAmount
                "'LineNote' TEXT," + // 26: LineNote
                "'ItemLot' TEXT," + // 27: ItemLot
                "'ReasonCode' TEXT," + // 28: ReasonCode
                "'ItemTaxPercentage' REAL," + // 29: ItemTaxPercentage
                "'ItemName' TEXT," + // 30: ItemName
                "'ItemAltName' TEXT," + // 31: ItemAltName
                "'ParentLineID' INTEGER," + // 32: ParentLineID
                "'ItemExpiryDate' INTEGER," + // 33: ItemExpiryDate
                "'ItemAffectedStock' TEXT," + // 34: ItemAffectedStock
                "'IsInvoiceRelated' INTEGER," + // 35: IsInvoiceRelated
                "'IsCompanyRelated' INTEGER," + // 36: IsCompanyRelated
                "'TaxAmountBig' REAL," + // 37: TaxAmountBig
                "'TaxAmountMedium' REAL," + // 38: TaxAmountMedium
                "'TaxAmountSmall' REAL," + // 39: TaxAmountSmall
                "'TotalExiceAmount' REAL," + // 40: TotalExiceAmount
                "'ItemMSL' INTEGER," + // 41: ItemMSL
                "'StampDate' INTEGER NOT NULL );"); // 42: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TransactionDetails'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransactionDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTransactionCode());
        stmt.bindLong(3, entity.getLineID());
 
        String ItemCode = entity.getItemCode();
        if (ItemCode != null) {
            stmt.bindString(4, ItemCode);
        }
 
        String OrderedType = entity.getOrderedType();
        if (OrderedType != null) {
            stmt.bindString(5, OrderedType);
        }
 
        Double QuantityBig = entity.getQuantityBig();
        if (QuantityBig != null) {
            stmt.bindDouble(6, QuantityBig);
        }
 
        Double QuantityMedium = entity.getQuantityMedium();
        if (QuantityMedium != null) {
            stmt.bindDouble(7, QuantityMedium);
        }
 
        Double QuantitySmall = entity.getQuantitySmall();
        if (QuantitySmall != null) {
            stmt.bindDouble(8, QuantitySmall);
        }
 
        Double BasicUnitQuantity = entity.getBasicUnitQuantity();
        if (BasicUnitQuantity != null) {
            stmt.bindDouble(9, BasicUnitQuantity);
        }
 
        Double ApprovedQuantityBig = entity.getApprovedQuantityBig();
        if (ApprovedQuantityBig != null) {
            stmt.bindDouble(10, ApprovedQuantityBig);
        }
 
        Double ApprovedQuantityMedium = entity.getApprovedQuantityMedium();
        if (ApprovedQuantityMedium != null) {
            stmt.bindDouble(11, ApprovedQuantityMedium);
        }
 
        Double ApprovedQuantitySmall = entity.getApprovedQuantitySmall();
        if (ApprovedQuantitySmall != null) {
            stmt.bindDouble(12, ApprovedQuantitySmall);
        }
 
        Double ApprovedBasicUnitQuantity = entity.getApprovedBasicUnitQuantity();
        if (ApprovedBasicUnitQuantity != null) {
            stmt.bindDouble(13, ApprovedBasicUnitQuantity);
        }
 
        Double MissedQuantityBig = entity.getMissedQuantityBig();
        if (MissedQuantityBig != null) {
            stmt.bindDouble(14, MissedQuantityBig);
        }
 
        Double MissedQuantityMedium = entity.getMissedQuantityMedium();
        if (MissedQuantityMedium != null) {
            stmt.bindDouble(15, MissedQuantityMedium);
        }
 
        Double MissedQuantitySmall = entity.getMissedQuantitySmall();
        if (MissedQuantitySmall != null) {
            stmt.bindDouble(16, MissedQuantitySmall);
        }
 
        Double MissedBasicUnitQuantity = entity.getMissedBasicUnitQuantity();
        if (MissedBasicUnitQuantity != null) {
            stmt.bindDouble(17, MissedBasicUnitQuantity);
        }
 
        Double PriceBig = entity.getPriceBig();
        if (PriceBig != null) {
            stmt.bindDouble(18, PriceBig);
        }
 
        Double PriceMedium = entity.getPriceMedium();
        if (PriceMedium != null) {
            stmt.bindDouble(19, PriceMedium);
        }
 
        Double PriceSmall = entity.getPriceSmall();
        if (PriceSmall != null) {
            stmt.bindDouble(20, PriceSmall);
        }
 
        Double UserPriceBig = entity.getUserPriceBig();
        if (UserPriceBig != null) {
            stmt.bindDouble(21, UserPriceBig);
        }
 
        Double UserPriceMedium = entity.getUserPriceMedium();
        if (UserPriceMedium != null) {
            stmt.bindDouble(22, UserPriceMedium);
        }
 
        Double UserPriceSmall = entity.getUserPriceSmall();
        if (UserPriceSmall != null) {
            stmt.bindDouble(23, UserPriceSmall);
        }
 
        Double DiscountPercentage = entity.getDiscountPercentage();
        if (DiscountPercentage != null) {
            stmt.bindDouble(24, DiscountPercentage);
        }
 
        Double DiscountAmount = entity.getDiscountAmount();
        if (DiscountAmount != null) {
            stmt.bindDouble(25, DiscountAmount);
        }
 
        Double TotalLineAmount = entity.getTotalLineAmount();
        if (TotalLineAmount != null) {
            stmt.bindDouble(26, TotalLineAmount);
        }
 
        String LineNote = entity.getLineNote();
        if (LineNote != null) {
            stmt.bindString(27, LineNote);
        }
 
        String ItemLot = entity.getItemLot();
        if (ItemLot != null) {
            stmt.bindString(28, ItemLot);
        }
 
        String ReasonCode = entity.getReasonCode();
        if (ReasonCode != null) {
            stmt.bindString(29, ReasonCode);
        }
 
        Double ItemTaxPercentage = entity.getItemTaxPercentage();
        if (ItemTaxPercentage != null) {
            stmt.bindDouble(30, ItemTaxPercentage);
        }
 
        String ItemName = entity.getItemName();
        if (ItemName != null) {
            stmt.bindString(31, ItemName);
        }
 
        String ItemAltName = entity.getItemAltName();
        if (ItemAltName != null) {
            stmt.bindString(32, ItemAltName);
        }
 
        Integer ParentLineID = entity.getParentLineID();
        if (ParentLineID != null) {
            stmt.bindLong(33, ParentLineID);
        }
 
        java.util.Date ItemExpiryDate = entity.getItemExpiryDate();
        if (ItemExpiryDate != null) {
            stmt.bindLong(34, ItemExpiryDate.getTime());
        }
 
        String ItemAffectedStock = entity.getItemAffectedStock();
        if (ItemAffectedStock != null) {
            stmt.bindString(35, ItemAffectedStock);
        }
 
        Integer IsInvoiceRelated = entity.getIsInvoiceRelated();
        if (IsInvoiceRelated != null) {
            stmt.bindLong(36, IsInvoiceRelated);
        }
 
        Integer IsCompanyRelated = entity.getIsCompanyRelated();
        if (IsCompanyRelated != null) {
            stmt.bindLong(37, IsCompanyRelated);
        }
 
        Double TaxAmountBig = entity.getTaxAmountBig();
        if (TaxAmountBig != null) {
            stmt.bindDouble(38, TaxAmountBig);
        }
 
        Double TaxAmountMedium = entity.getTaxAmountMedium();
        if (TaxAmountMedium != null) {
            stmt.bindDouble(39, TaxAmountMedium);
        }
 
        Double TaxAmountSmall = entity.getTaxAmountSmall();
        if (TaxAmountSmall != null) {
            stmt.bindDouble(40, TaxAmountSmall);
        }
 
        Double TotalExiceAmount = entity.getTotalExiceAmount();
        if (TotalExiceAmount != null) {
            stmt.bindDouble(41, TotalExiceAmount);
        }
 
        Integer ItemMSL = entity.getItemMSL();
        if (ItemMSL != null) {
            stmt.bindLong(42, ItemMSL);
        }
        stmt.bindLong(43, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransactionDetails readEntity(Cursor cursor, int offset) {
        TransactionDetails entity = new TransactionDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TransactionCode
            cursor.getInt(offset + 2), // LineID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ItemCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // OrderedType
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // QuantityBig
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // QuantityMedium
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // QuantitySmall
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // BasicUnitQuantity
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // ApprovedQuantityBig
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // ApprovedQuantityMedium
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // ApprovedQuantitySmall
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // ApprovedBasicUnitQuantity
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // MissedQuantityBig
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // MissedQuantityMedium
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // MissedQuantitySmall
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // MissedBasicUnitQuantity
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // PriceBig
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // PriceMedium
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // PriceSmall
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // UserPriceBig
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // UserPriceMedium
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // UserPriceSmall
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // DiscountPercentage
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24), // DiscountAmount
            cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25), // TotalLineAmount
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // LineNote
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ItemLot
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // ReasonCode
            cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29), // ItemTaxPercentage
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // ItemName
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // ItemAltName
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // ParentLineID
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)), // ItemExpiryDate
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // ItemAffectedStock
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // IsInvoiceRelated
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // IsCompanyRelated
            cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37), // TaxAmountBig
            cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38), // TaxAmountMedium
            cursor.isNull(offset + 39) ? null : cursor.getDouble(offset + 39), // TaxAmountSmall
            cursor.isNull(offset + 40) ? null : cursor.getDouble(offset + 40), // TotalExiceAmount
            cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41), // ItemMSL
            new java.util.Date(cursor.getLong(offset + 42)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransactionDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactionCode(cursor.getString(offset + 1));
        entity.setLineID(cursor.getInt(offset + 2));
        entity.setItemCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderedType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuantityBig(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setQuantityMedium(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setQuantitySmall(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setBasicUnitQuantity(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setApprovedQuantityBig(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setApprovedQuantityMedium(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setApprovedQuantitySmall(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setApprovedBasicUnitQuantity(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setMissedQuantityBig(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setMissedQuantityMedium(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setMissedQuantitySmall(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setMissedBasicUnitQuantity(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setPriceBig(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setPriceMedium(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setPriceSmall(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setUserPriceBig(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setUserPriceMedium(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setUserPriceSmall(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setDiscountPercentage(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setDiscountAmount(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
        entity.setTotalLineAmount(cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25));
        entity.setLineNote(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setItemLot(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setReasonCode(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setItemTaxPercentage(cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29));
        entity.setItemName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setItemAltName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setParentLineID(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setItemExpiryDate(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
        entity.setItemAffectedStock(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setIsInvoiceRelated(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setIsCompanyRelated(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setTaxAmountBig(cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37));
        entity.setTaxAmountMedium(cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38));
        entity.setTaxAmountSmall(cursor.isNull(offset + 39) ? null : cursor.getDouble(offset + 39));
        entity.setTotalExiceAmount(cursor.isNull(offset + 40) ? null : cursor.getDouble(offset + 40));
        entity.setItemMSL(cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 42)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TransactionDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TransactionDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
