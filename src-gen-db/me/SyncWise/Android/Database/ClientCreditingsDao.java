package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ClientCreditings;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ClientCreditings.
*/
public class ClientCreditingsDao extends AbstractDao<ClientCreditings, Long> {

    public static final String TABLENAME = "ClientCreditings";

    /**
     * Properties of entity ClientCreditings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreditCode = new Property(1, String.class, "CreditCode", false, "CreditCode");
        public final static Property ClientCode = new Property(2, String.class, "ClientCode", false, "ClientCode");
        public final static Property CurrencyCode = new Property(3, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property DivisionCode = new Property(4, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(5, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property CreditAmount = new Property(6, Double.class, "CreditAmount", false, "CreditAmount");
        public final static Property CreditBalance = new Property(7, Double.class, "CreditBalance", false, "CreditBalance");
        public final static Property StampDate = new Property(8, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ClientCreditingsDao(DaoConfig config) {
        super(config);
    }
    
    public ClientCreditingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ClientCreditings' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CreditCode' TEXT NOT NULL ," + // 1: CreditCode
                "'ClientCode' TEXT NOT NULL ," + // 2: ClientCode
                "'CurrencyCode' TEXT NOT NULL ," + // 3: CurrencyCode
                "'DivisionCode' TEXT NOT NULL ," + // 4: DivisionCode
                "'CompanyCode' TEXT NOT NULL ," + // 5: CompanyCode
                "'CreditAmount' REAL," + // 6: CreditAmount
                "'CreditBalance' REAL," + // 7: CreditBalance
                "'StampDate' INTEGER NOT NULL );"); // 8: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ClientCreditings'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClientCreditings entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCreditCode());
        stmt.bindString(3, entity.getClientCode());
        stmt.bindString(4, entity.getCurrencyCode());
        stmt.bindString(5, entity.getDivisionCode());
        stmt.bindString(6, entity.getCompanyCode());
 
        Double CreditAmount = entity.getCreditAmount();
        if (CreditAmount != null) {
            stmt.bindDouble(7, CreditAmount);
        }
 
        Double CreditBalance = entity.getCreditBalance();
        if (CreditBalance != null) {
            stmt.bindDouble(8, CreditBalance);
        }
        stmt.bindLong(9, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClientCreditings readEntity(Cursor cursor, int offset) {
        ClientCreditings entity = new ClientCreditings( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CreditCode
            cursor.getString(offset + 2), // ClientCode
            cursor.getString(offset + 3), // CurrencyCode
            cursor.getString(offset + 4), // DivisionCode
            cursor.getString(offset + 5), // CompanyCode
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // CreditAmount
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // CreditBalance
            new java.util.Date(cursor.getLong(offset + 8)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClientCreditings entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreditCode(cursor.getString(offset + 1));
        entity.setClientCode(cursor.getString(offset + 2));
        entity.setCurrencyCode(cursor.getString(offset + 3));
        entity.setDivisionCode(cursor.getString(offset + 4));
        entity.setCompanyCode(cursor.getString(offset + 5));
        entity.setCreditAmount(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setCreditBalance(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClientCreditings entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ClientCreditings entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
