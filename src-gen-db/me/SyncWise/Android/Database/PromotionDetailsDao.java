package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.PromotionDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PromotionDetails.
*/
public class PromotionDetailsDao extends AbstractDao<PromotionDetails, Long> {

    public static final String TABLENAME = "PromotionDetails";

    /**
     * Properties of entity PromotionDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PromotionID = new Property(1, int.class, "PromotionID", false, "PromotionID");
        public final static Property LineID = new Property(2, int.class, "LineID", false, "LineID");
        public final static Property OrderedItemCode = new Property(3, String.class, "OrderedItemCode", false, "OrderedItemCode");
        public final static Property OrderedQuantity = new Property(4, Double.class, "OrderedQuantity", false, "OrderedQuantity");
        public final static Property BasicOrderedQuantity = new Property(5, Double.class, "BasicOrderedQuantity", false, "BasicOrderedQuantity");
        public final static Property OrderedUnit = new Property(6, String.class, "OrderedUnit", false, "OrderedUnit");
        public final static Property OfferedItemCode = new Property(7, String.class, "OfferedItemCode", false, "OfferedItemCode");
        public final static Property OfferedQuantity = new Property(8, Double.class, "OfferedQuantity", false, "OfferedQuantity");
        public final static Property BasicOfferedQuantity = new Property(9, Double.class, "BasicOfferedQuantity", false, "BasicOfferedQuantity");
        public final static Property OfferedUnit = new Property(10, String.class, "OfferedUnit", false, "OfferedUnit");
        public final static Property OfferedLimit = new Property(11, Integer.class, "OfferedLimit", false, "OfferedLimit");
        public final static Property DiscountAmount = new Property(12, Double.class, "DiscountAmount", false, "DiscountAmount");
        public final static Property TotalAmount = new Property(13, Double.class, "TotalAmount", false, "TotalAmount");
        public final static Property DiscountPercentage = new Property(14, Double.class, "DiscountPercentage", false, "DiscountPercentage");
        public final static Property PromotionDetailType = new Property(15, Integer.class, "PromotionDetailType", false, "PromotionDetailType");
        public final static Property ApplyOriginalDiscount = new Property(16, Integer.class, "ApplyOriginalDiscount", false, "ApplyOriginalDiscount");
        public final static Property StampDate = new Property(17, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public PromotionDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public PromotionDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PromotionDetails' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PromotionID' INTEGER NOT NULL ," + // 1: PromotionID
                "'LineID' INTEGER NOT NULL ," + // 2: LineID
                "'OrderedItemCode' TEXT," + // 3: OrderedItemCode
                "'OrderedQuantity' REAL," + // 4: OrderedQuantity
                "'BasicOrderedQuantity' REAL," + // 5: BasicOrderedQuantity
                "'OrderedUnit' TEXT," + // 6: OrderedUnit
                "'OfferedItemCode' TEXT," + // 7: OfferedItemCode
                "'OfferedQuantity' REAL," + // 8: OfferedQuantity
                "'BasicOfferedQuantity' REAL," + // 9: BasicOfferedQuantity
                "'OfferedUnit' TEXT," + // 10: OfferedUnit
                "'OfferedLimit' INTEGER," + // 11: OfferedLimit
                "'DiscountAmount' REAL," + // 12: DiscountAmount
                "'TotalAmount' REAL," + // 13: TotalAmount
                "'DiscountPercentage' REAL," + // 14: DiscountPercentage
                "'PromotionDetailType' INTEGER," + // 15: PromotionDetailType
                "'ApplyOriginalDiscount' INTEGER," + // 16: ApplyOriginalDiscount
                "'StampDate' INTEGER NOT NULL );"); // 17: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PromotionDetails'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PromotionDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPromotionID());
        stmt.bindLong(3, entity.getLineID());
 
        String OrderedItemCode = entity.getOrderedItemCode();
        if (OrderedItemCode != null) {
            stmt.bindString(4, OrderedItemCode);
        }
 
        Double OrderedQuantity = entity.getOrderedQuantity();
        if (OrderedQuantity != null) {
            stmt.bindDouble(5, OrderedQuantity);
        }
 
        Double BasicOrderedQuantity = entity.getBasicOrderedQuantity();
        if (BasicOrderedQuantity != null) {
            stmt.bindDouble(6, BasicOrderedQuantity);
        }
 
        String OrderedUnit = entity.getOrderedUnit();
        if (OrderedUnit != null) {
            stmt.bindString(7, OrderedUnit);
        }
 
        String OfferedItemCode = entity.getOfferedItemCode();
        if (OfferedItemCode != null) {
            stmt.bindString(8, OfferedItemCode);
        }
 
        Double OfferedQuantity = entity.getOfferedQuantity();
        if (OfferedQuantity != null) {
            stmt.bindDouble(9, OfferedQuantity);
        }
 
        Double BasicOfferedQuantity = entity.getBasicOfferedQuantity();
        if (BasicOfferedQuantity != null) {
            stmt.bindDouble(10, BasicOfferedQuantity);
        }
 
        String OfferedUnit = entity.getOfferedUnit();
        if (OfferedUnit != null) {
            stmt.bindString(11, OfferedUnit);
        }
 
        Integer OfferedLimit = entity.getOfferedLimit();
        if (OfferedLimit != null) {
            stmt.bindLong(12, OfferedLimit);
        }
 
        Double DiscountAmount = entity.getDiscountAmount();
        if (DiscountAmount != null) {
            stmt.bindDouble(13, DiscountAmount);
        }
 
        Double TotalAmount = entity.getTotalAmount();
        if (TotalAmount != null) {
            stmt.bindDouble(14, TotalAmount);
        }
 
        Double DiscountPercentage = entity.getDiscountPercentage();
        if (DiscountPercentage != null) {
            stmt.bindDouble(15, DiscountPercentage);
        }
 
        Integer PromotionDetailType = entity.getPromotionDetailType();
        if (PromotionDetailType != null) {
            stmt.bindLong(16, PromotionDetailType);
        }
 
        Integer ApplyOriginalDiscount = entity.getApplyOriginalDiscount();
        if (ApplyOriginalDiscount != null) {
            stmt.bindLong(17, ApplyOriginalDiscount);
        }
        stmt.bindLong(18, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PromotionDetails readEntity(Cursor cursor, int offset) {
        PromotionDetails entity = new PromotionDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // PromotionID
            cursor.getInt(offset + 2), // LineID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // OrderedItemCode
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // OrderedQuantity
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // BasicOrderedQuantity
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // OrderedUnit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // OfferedItemCode
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // OfferedQuantity
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // BasicOfferedQuantity
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // OfferedUnit
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // OfferedLimit
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // DiscountAmount
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // TotalAmount
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // DiscountPercentage
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // PromotionDetailType
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // ApplyOriginalDiscount
            new java.util.Date(cursor.getLong(offset + 17)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PromotionDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPromotionID(cursor.getInt(offset + 1));
        entity.setLineID(cursor.getInt(offset + 2));
        entity.setOrderedItemCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderedQuantity(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setBasicOrderedQuantity(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setOrderedUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOfferedItemCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOfferedQuantity(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBasicOfferedQuantity(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setOfferedUnit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOfferedLimit(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setDiscountAmount(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setTotalAmount(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setDiscountPercentage(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setPromotionDetailType(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setApplyOriginalDiscount(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PromotionDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PromotionDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
