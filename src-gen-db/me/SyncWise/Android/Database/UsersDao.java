package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Users;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Users.
*/
public class UsersDao extends AbstractDao<Users, Long> {

    public static final String TABLENAME = "Users";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "UserCode", false, "UserCode");
        public final static Property CompanyCode = new Property(2, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property UserLoginName = new Property(3, String.class, "UserLoginName", false, "UserLoginName");
        public final static Property UserName = new Property(4, String.class, "UserName", false, "UserName");
        public final static Property UserAltName = new Property(5, String.class, "UserAltName", false, "UserAltName");
        public final static Property PrefixID = new Property(6, int.class, "PrefixID", false, "PrefixID");
        public final static Property UserPassword = new Property(7, String.class, "UserPassword", false, "UserPassword");
        public final static Property UserPhone = new Property(8, String.class, "UserPhone", false, "UserPhone");
        public final static Property UserAddress = new Property(9, String.class, "UserAddress", false, "UserAddress");
        public final static Property UserEmail = new Property(10, String.class, "UserEmail", false, "UserEmail");
        public final static Property UserStatus = new Property(11, Integer.class, "UserStatus", false, "UserStatus");
        public final static Property UserType = new Property(12, Integer.class, "UserType", false, "UserType");
        public final static Property ParentCode = new Property(13, String.class, "ParentCode", false, "ParentCode");
        public final static Property CoefficientNumber = new Property(14, Integer.class, "CoefficientNumber", false, "CoefficientNumber");
        public final static Property StampDate = new Property(15, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Users' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UserCode' TEXT NOT NULL ," + // 1: UserCode
                "'CompanyCode' TEXT NOT NULL ," + // 2: CompanyCode
                "'UserLoginName' TEXT NOT NULL ," + // 3: UserLoginName
                "'UserName' TEXT," + // 4: UserName
                "'UserAltName' TEXT," + // 5: UserAltName
                "'PrefixID' INTEGER NOT NULL ," + // 6: PrefixID
                "'UserPassword' TEXT," + // 7: UserPassword
                "'UserPhone' TEXT," + // 8: UserPhone
                "'UserAddress' TEXT," + // 9: UserAddress
                "'UserEmail' TEXT," + // 10: UserEmail
                "'UserStatus' INTEGER," + // 11: UserStatus
                "'UserType' INTEGER," + // 12: UserType
                "'ParentCode' TEXT," + // 13: ParentCode
                "'CoefficientNumber' INTEGER," + // 14: CoefficientNumber
                "'StampDate' INTEGER NOT NULL );"); // 15: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Users'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserCode());
        stmt.bindString(3, entity.getCompanyCode());
        stmt.bindString(4, entity.getUserLoginName());
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(5, UserName);
        }
 
        String UserAltName = entity.getUserAltName();
        if (UserAltName != null) {
            stmt.bindString(6, UserAltName);
        }
        stmt.bindLong(7, entity.getPrefixID());
 
        String UserPassword = entity.getUserPassword();
        if (UserPassword != null) {
            stmt.bindString(8, UserPassword);
        }
 
        String UserPhone = entity.getUserPhone();
        if (UserPhone != null) {
            stmt.bindString(9, UserPhone);
        }
 
        String UserAddress = entity.getUserAddress();
        if (UserAddress != null) {
            stmt.bindString(10, UserAddress);
        }
 
        String UserEmail = entity.getUserEmail();
        if (UserEmail != null) {
            stmt.bindString(11, UserEmail);
        }
 
        Integer UserStatus = entity.getUserStatus();
        if (UserStatus != null) {
            stmt.bindLong(12, UserStatus);
        }
 
        Integer UserType = entity.getUserType();
        if (UserType != null) {
            stmt.bindLong(13, UserType);
        }
 
        String ParentCode = entity.getParentCode();
        if (ParentCode != null) {
            stmt.bindString(14, ParentCode);
        }
 
        Integer CoefficientNumber = entity.getCoefficientNumber();
        if (CoefficientNumber != null) {
            stmt.bindLong(15, CoefficientNumber);
        }
        stmt.bindLong(16, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // UserCode
            cursor.getString(offset + 2), // CompanyCode
            cursor.getString(offset + 3), // UserLoginName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UserName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UserAltName
            cursor.getInt(offset + 6), // PrefixID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UserPassword
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // UserPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UserAddress
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // UserEmail
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // UserStatus
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // UserType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ParentCode
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // CoefficientNumber
            new java.util.Date(cursor.getLong(offset + 15)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.getString(offset + 1));
        entity.setCompanyCode(cursor.getString(offset + 2));
        entity.setUserLoginName(cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserAltName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrefixID(cursor.getInt(offset + 6));
        entity.setUserPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setUserType(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setParentCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCoefficientNumber(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 15)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Users entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Users entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
