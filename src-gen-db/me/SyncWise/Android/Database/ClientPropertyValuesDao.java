package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ClientPropertyValues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ClientPropertyValues.
*/
public class ClientPropertyValuesDao extends AbstractDao<ClientPropertyValues, Long> {

    public static final String TABLENAME = "ClientPropertyValues";

    /**
     * Properties of entity ClientPropertyValues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClientPropertyValueCode = new Property(1, String.class, "ClientPropertyValueCode", false, "ClientPropertyValueCode");
        public final static Property ClientPropertyLevelCode = new Property(2, String.class, "ClientPropertyLevelCode", false, "ClientPropertyLevelCode");
        public final static Property ClientPropertyValueDescription = new Property(3, String.class, "ClientPropertyValueDescription", false, "ClientPropertyValueDescription");
        public final static Property ClientPropertyValueAltDescription = new Property(4, String.class, "ClientPropertyValueAltDescription", false, "ClientPropertyValueAltDescription");
        public final static Property StampDate = new Property(5, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ClientPropertyValuesDao(DaoConfig config) {
        super(config);
    }
    
    public ClientPropertyValuesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ClientPropertyValues' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ClientPropertyValueCode' TEXT NOT NULL UNIQUE ," + // 1: ClientPropertyValueCode
                "'ClientPropertyLevelCode' TEXT NOT NULL ," + // 2: ClientPropertyLevelCode
                "'ClientPropertyValueDescription' TEXT," + // 3: ClientPropertyValueDescription
                "'ClientPropertyValueAltDescription' TEXT," + // 4: ClientPropertyValueAltDescription
                "'StampDate' INTEGER NOT NULL );"); // 5: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ClientPropertyValues'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClientPropertyValues entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getClientPropertyValueCode());
        stmt.bindString(3, entity.getClientPropertyLevelCode());
 
        String ClientPropertyValueDescription = entity.getClientPropertyValueDescription();
        if (ClientPropertyValueDescription != null) {
            stmt.bindString(4, ClientPropertyValueDescription);
        }
 
        String ClientPropertyValueAltDescription = entity.getClientPropertyValueAltDescription();
        if (ClientPropertyValueAltDescription != null) {
            stmt.bindString(5, ClientPropertyValueAltDescription);
        }
        stmt.bindLong(6, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClientPropertyValues readEntity(Cursor cursor, int offset) {
        ClientPropertyValues entity = new ClientPropertyValues( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // ClientPropertyValueCode
            cursor.getString(offset + 2), // ClientPropertyLevelCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ClientPropertyValueDescription
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ClientPropertyValueAltDescription
            new java.util.Date(cursor.getLong(offset + 5)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClientPropertyValues entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClientPropertyValueCode(cursor.getString(offset + 1));
        entity.setClientPropertyLevelCode(cursor.getString(offset + 2));
        entity.setClientPropertyValueDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClientPropertyValueAltDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClientPropertyValues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ClientPropertyValues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
