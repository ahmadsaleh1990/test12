package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.BlankVisits;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BlankVisits.
*/
public class BlankVisitsDao extends AbstractDao<BlankVisits, Long> {

    public static final String TABLENAME = "BlankVisits";

    /**
     * Properties of entity BlankVisits.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VisitID = new Property(1, long.class, "VisitID", false, "VisitID");
        public final static Property BlankVisitNote = new Property(2, String.class, "BlankVisitNote", false, "BlankVisitNote");
        public final static Property IsProcessed = new Property(3, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(4, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public BlankVisitsDao(DaoConfig config) {
        super(config);
    }
    
    public BlankVisitsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BlankVisits' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'VisitID' INTEGER NOT NULL UNIQUE ," + // 1: VisitID
                "'BlankVisitNote' TEXT," + // 2: BlankVisitNote
                "'IsProcessed' INTEGER NOT NULL ," + // 3: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 4: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BlankVisits'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BlankVisits entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVisitID());
 
        String BlankVisitNote = entity.getBlankVisitNote();
        if (BlankVisitNote != null) {
            stmt.bindString(3, BlankVisitNote);
        }
        stmt.bindLong(4, entity.getIsProcessed());
        stmt.bindLong(5, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BlankVisits readEntity(Cursor cursor, int offset) {
        BlankVisits entity = new BlankVisits( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // VisitID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BlankVisitNote
            cursor.getInt(offset + 3), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 4)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BlankVisits entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVisitID(cursor.getLong(offset + 1));
        entity.setBlankVisitNote(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsProcessed(cursor.getInt(offset + 3));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BlankVisits entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BlankVisits entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
