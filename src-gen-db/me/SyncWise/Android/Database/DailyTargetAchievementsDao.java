package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.DailyTargetAchievements;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DailyTargetAchievements.
*/
public class DailyTargetAchievementsDao extends AbstractDao<DailyTargetAchievements, Long> {

    public static final String TABLENAME = "DailyTargetAchievements";

    /**
     * Properties of entity DailyTargetAchievements.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetCode = new Property(1, String.class, "TargetCode", false, "TargetCode");
        public final static Property TargetDescription = new Property(2, String.class, "TargetDescription", false, "TargetDescription");
        public final static Property VolumeMissed = new Property(3, Integer.class, "VolumeMissed", false, "VolumeMissed");
        public final static Property CalculatedMissed = new Property(4, Integer.class, "CalculatedMissed", false, "CalculatedMissed");
        public final static Property VolumeNewSKU = new Property(5, Integer.class, "VolumeNewSKU", false, "VolumeNewSKU");
        public final static Property CalculatedNewSKU = new Property(6, Integer.class, "CalculatedNewSKU", false, "CalculatedNewSKU");
        public final static Property ValidFrom = new Property(7, java.util.Date.class, "ValidFrom", false, "ValidFrom");
        public final static Property ValidTo = new Property(8, java.util.Date.class, "ValidTo", false, "ValidTo");
        public final static Property StampDate = new Property(9, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public DailyTargetAchievementsDao(DaoConfig config) {
        super(config);
    }
    
    public DailyTargetAchievementsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DailyTargetAchievements' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TargetCode' TEXT," + // 1: TargetCode
                "'TargetDescription' TEXT," + // 2: TargetDescription
                "'VolumeMissed' INTEGER," + // 3: VolumeMissed
                "'CalculatedMissed' INTEGER," + // 4: CalculatedMissed
                "'VolumeNewSKU' INTEGER," + // 5: VolumeNewSKU
                "'CalculatedNewSKU' INTEGER," + // 6: CalculatedNewSKU
                "'ValidFrom' INTEGER," + // 7: ValidFrom
                "'ValidTo' INTEGER," + // 8: ValidTo
                "'StampDate' INTEGER NOT NULL );"); // 9: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DailyTargetAchievements'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DailyTargetAchievements entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TargetCode = entity.getTargetCode();
        if (TargetCode != null) {
            stmt.bindString(2, TargetCode);
        }
 
        String TargetDescription = entity.getTargetDescription();
        if (TargetDescription != null) {
            stmt.bindString(3, TargetDescription);
        }
 
        Integer VolumeMissed = entity.getVolumeMissed();
        if (VolumeMissed != null) {
            stmt.bindLong(4, VolumeMissed);
        }
 
        Integer CalculatedMissed = entity.getCalculatedMissed();
        if (CalculatedMissed != null) {
            stmt.bindLong(5, CalculatedMissed);
        }
 
        Integer VolumeNewSKU = entity.getVolumeNewSKU();
        if (VolumeNewSKU != null) {
            stmt.bindLong(6, VolumeNewSKU);
        }
 
        Integer CalculatedNewSKU = entity.getCalculatedNewSKU();
        if (CalculatedNewSKU != null) {
            stmt.bindLong(7, CalculatedNewSKU);
        }
 
        java.util.Date ValidFrom = entity.getValidFrom();
        if (ValidFrom != null) {
            stmt.bindLong(8, ValidFrom.getTime());
        }
 
        java.util.Date ValidTo = entity.getValidTo();
        if (ValidTo != null) {
            stmt.bindLong(9, ValidTo.getTime());
        }
        stmt.bindLong(10, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DailyTargetAchievements readEntity(Cursor cursor, int offset) {
        DailyTargetAchievements entity = new DailyTargetAchievements( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TargetCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TargetDescription
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // VolumeMissed
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // CalculatedMissed
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // VolumeNewSKU
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // CalculatedNewSKU
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // ValidFrom
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // ValidTo
            new java.util.Date(cursor.getLong(offset + 9)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DailyTargetAchievements entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTargetDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVolumeMissed(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCalculatedMissed(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setVolumeNewSKU(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCalculatedNewSKU(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setValidFrom(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setValidTo(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DailyTargetAchievements entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DailyTargetAchievements entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
