package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Prices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Prices.
*/
public class PricesDao extends AbstractDao<Prices, Long> {

    public static final String TABLENAME = "Prices";

    /**
     * Properties of entity Prices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PriceListCode = new Property(1, String.class, "PriceListCode", false, "PriceListCode");
        public final static Property ItemCode = new Property(2, String.class, "ItemCode", false, "ItemCode");
        public final static Property CompanyCode = new Property(3, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property CurrencyCode = new Property(4, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property PriceBig = new Property(5, Double.class, "PriceBig", false, "PriceBig");
        public final static Property PriceMedium = new Property(6, Double.class, "PriceMedium", false, "PriceMedium");
        public final static Property PriceSmall = new Property(7, Double.class, "PriceSmall", false, "PriceSmall");
        public final static Property DiscountPercentage = new Property(8, Double.class, "DiscountPercentage", false, "DiscountPercentage");
        public final static Property DiscountAmount = new Property(9, Double.class, "DiscountAmount", false, "DiscountAmount");
        public final static Property UnitTaxAmount = new Property(10, Double.class, "UnitTaxAmount", false, "UnitTaxAmount");
        public final static Property CaseTaxAmount = new Property(11, Double.class, "CaseTaxAmount", false, "CaseTaxAmount");
        public final static Property StampDate = new Property(12, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public PricesDao(DaoConfig config) {
        super(config);
    }
    
    public PricesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Prices' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PriceListCode' TEXT NOT NULL ," + // 1: PriceListCode
                "'ItemCode' TEXT NOT NULL ," + // 2: ItemCode
                "'CompanyCode' TEXT NOT NULL ," + // 3: CompanyCode
                "'CurrencyCode' TEXT," + // 4: CurrencyCode
                "'PriceBig' REAL," + // 5: PriceBig
                "'PriceMedium' REAL," + // 6: PriceMedium
                "'PriceSmall' REAL," + // 7: PriceSmall
                "'DiscountPercentage' REAL," + // 8: DiscountPercentage
                "'DiscountAmount' REAL," + // 9: DiscountAmount
                "'UnitTaxAmount' REAL," + // 10: UnitTaxAmount
                "'CaseTaxAmount' REAL," + // 11: CaseTaxAmount
                "'StampDate' INTEGER NOT NULL );"); // 12: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Prices'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Prices entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPriceListCode());
        stmt.bindString(3, entity.getItemCode());
        stmt.bindString(4, entity.getCompanyCode());
 
        String CurrencyCode = entity.getCurrencyCode();
        if (CurrencyCode != null) {
            stmt.bindString(5, CurrencyCode);
        }
 
        Double PriceBig = entity.getPriceBig();
        if (PriceBig != null) {
            stmt.bindDouble(6, PriceBig);
        }
 
        Double PriceMedium = entity.getPriceMedium();
        if (PriceMedium != null) {
            stmt.bindDouble(7, PriceMedium);
        }
 
        Double PriceSmall = entity.getPriceSmall();
        if (PriceSmall != null) {
            stmt.bindDouble(8, PriceSmall);
        }
 
        Double DiscountPercentage = entity.getDiscountPercentage();
        if (DiscountPercentage != null) {
            stmt.bindDouble(9, DiscountPercentage);
        }
 
        Double DiscountAmount = entity.getDiscountAmount();
        if (DiscountAmount != null) {
            stmt.bindDouble(10, DiscountAmount);
        }
 
        Double UnitTaxAmount = entity.getUnitTaxAmount();
        if (UnitTaxAmount != null) {
            stmt.bindDouble(11, UnitTaxAmount);
        }
 
        Double CaseTaxAmount = entity.getCaseTaxAmount();
        if (CaseTaxAmount != null) {
            stmt.bindDouble(12, CaseTaxAmount);
        }
        stmt.bindLong(13, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Prices readEntity(Cursor cursor, int offset) {
        Prices entity = new Prices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // PriceListCode
            cursor.getString(offset + 2), // ItemCode
            cursor.getString(offset + 3), // CompanyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CurrencyCode
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // PriceBig
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // PriceMedium
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // PriceSmall
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // DiscountPercentage
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // DiscountAmount
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // UnitTaxAmount
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // CaseTaxAmount
            new java.util.Date(cursor.getLong(offset + 12)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Prices entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPriceListCode(cursor.getString(offset + 1));
        entity.setItemCode(cursor.getString(offset + 2));
        entity.setCompanyCode(cursor.getString(offset + 3));
        entity.setCurrencyCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPriceBig(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setPriceMedium(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setPriceSmall(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setDiscountPercentage(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setDiscountAmount(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setUnitTaxAmount(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setCaseTaxAmount(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Prices entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Prices entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
