package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.DeviceTracking;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DeviceTracking.
*/
public class DeviceTrackingDao extends AbstractDao<DeviceTracking, Long> {

    public static final String TABLENAME = "DeviceTracking";

    /**
     * Properties of entity DeviceTracking.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceSerialCode = new Property(1, String.class, "DeviceSerialCode", false, "DeviceSerialCode");
        public final static Property Latitude = new Property(2, String.class, "Latitude", false, "Latitude");
        public final static Property Longitude = new Property(3, String.class, "Longitude", false, "Longitude");
        public final static Property Accuracy = new Property(4, Integer.class, "Accuracy", false, "Accuracy");
        public final static Property Date = new Property(5, java.util.Date.class, "Date", false, "Date");
        public final static Property Provider = new Property(6, String.class, "Provider", false, "Provider");
        public final static Property IsGPSEnabled = new Property(7, Integer.class, "IsGPSEnabled", false, "IsGPSEnabled");
        public final static Property IsNetworkEnabled = new Property(8, Integer.class, "IsNetworkEnabled", false, "IsNetworkEnabled");
        public final static Property StampDate = new Property(9, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public DeviceTrackingDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceTrackingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DeviceTracking' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DeviceSerialCode' TEXT," + // 1: DeviceSerialCode
                "'Latitude' TEXT," + // 2: Latitude
                "'Longitude' TEXT," + // 3: Longitude
                "'Accuracy' INTEGER," + // 4: Accuracy
                "'Date' INTEGER," + // 5: Date
                "'Provider' TEXT," + // 6: Provider
                "'IsGPSEnabled' INTEGER," + // 7: IsGPSEnabled
                "'IsNetworkEnabled' INTEGER," + // 8: IsNetworkEnabled
                "'StampDate' INTEGER NOT NULL );"); // 9: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DeviceTracking'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DeviceTracking entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String DeviceSerialCode = entity.getDeviceSerialCode();
        if (DeviceSerialCode != null) {
            stmt.bindString(2, DeviceSerialCode);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(3, Latitude);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(4, Longitude);
        }
 
        Integer Accuracy = entity.getAccuracy();
        if (Accuracy != null) {
            stmt.bindLong(5, Accuracy);
        }
 
        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(6, Date.getTime());
        }
 
        String Provider = entity.getProvider();
        if (Provider != null) {
            stmt.bindString(7, Provider);
        }
 
        Integer IsGPSEnabled = entity.getIsGPSEnabled();
        if (IsGPSEnabled != null) {
            stmt.bindLong(8, IsGPSEnabled);
        }
 
        Integer IsNetworkEnabled = entity.getIsNetworkEnabled();
        if (IsNetworkEnabled != null) {
            stmt.bindLong(9, IsNetworkEnabled);
        }
        stmt.bindLong(10, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DeviceTracking readEntity(Cursor cursor, int offset) {
        DeviceTracking entity = new DeviceTracking( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DeviceSerialCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Latitude
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Longitude
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Accuracy
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // Date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Provider
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // IsGPSEnabled
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // IsNetworkEnabled
            new java.util.Date(cursor.getLong(offset + 9)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DeviceTracking entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceSerialCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccuracy(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setProvider(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsGPSEnabled(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsNetworkEnabled(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DeviceTracking entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DeviceTracking entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
