package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Areas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Areas.
*/
public class AreasDao extends AbstractDao<Areas, Long> {

    public static final String TABLENAME = "Areas";

    /**
     * Properties of entity Areas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AreaCode = new Property(1, String.class, "AreaCode", false, "AreaCode");
        public final static Property AreaDescription = new Property(2, String.class, "AreaDescription", false, "AreaDescription");
        public final static Property AreaAltDescription = new Property(3, String.class, "AreaAltDescription", false, "AreaAltDescription");
        public final static Property AreaLevelCode = new Property(4, String.class, "AreaLevelCode", false, "AreaLevelCode");
        public final static Property ParentCode = new Property(5, String.class, "ParentCode", false, "ParentCode");
        public final static Property StampDate = new Property(6, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public AreasDao(DaoConfig config) {
        super(config);
    }
    
    public AreasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Areas' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AreaCode' TEXT NOT NULL UNIQUE ," + // 1: AreaCode
                "'AreaDescription' TEXT," + // 2: AreaDescription
                "'AreaAltDescription' TEXT," + // 3: AreaAltDescription
                "'AreaLevelCode' TEXT," + // 4: AreaLevelCode
                "'ParentCode' TEXT," + // 5: ParentCode
                "'StampDate' INTEGER NOT NULL );"); // 6: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Areas'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Areas entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAreaCode());
 
        String AreaDescription = entity.getAreaDescription();
        if (AreaDescription != null) {
            stmt.bindString(3, AreaDescription);
        }
 
        String AreaAltDescription = entity.getAreaAltDescription();
        if (AreaAltDescription != null) {
            stmt.bindString(4, AreaAltDescription);
        }
 
        String AreaLevelCode = entity.getAreaLevelCode();
        if (AreaLevelCode != null) {
            stmt.bindString(5, AreaLevelCode);
        }
 
        String ParentCode = entity.getParentCode();
        if (ParentCode != null) {
            stmt.bindString(6, ParentCode);
        }
        stmt.bindLong(7, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Areas readEntity(Cursor cursor, int offset) {
        Areas entity = new Areas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // AreaCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AreaDescription
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AreaAltDescription
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AreaLevelCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ParentCode
            new java.util.Date(cursor.getLong(offset + 6)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Areas entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAreaCode(cursor.getString(offset + 1));
        entity.setAreaDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaAltDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaLevelCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setParentCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Areas entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Areas entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
