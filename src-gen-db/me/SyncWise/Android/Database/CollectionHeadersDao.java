package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.CollectionHeaders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CollectionHeaders.
*/
public class CollectionHeadersDao extends AbstractDao<CollectionHeaders, Long> {

    public static final String TABLENAME = "CollectionHeaders";

    /**
     * Properties of entity CollectionHeaders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CollectionCode = new Property(1, String.class, "CollectionCode", false, "CollectionCode");
        public final static Property VisitID = new Property(2, Long.class, "VisitID", false, "VisitID");
        public final static Property JourneyCode = new Property(3, String.class, "JourneyCode", false, "JourneyCode");
        public final static Property ClientCode = new Property(4, String.class, "ClientCode", false, "ClientCode");
        public final static Property TotalAmount = new Property(5, Double.class, "TotalAmount", false, "TotalAmount");
        public final static Property CurrencyCode = new Property(6, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property UserCode = new Property(7, String.class, "UserCode", false, "UserCode");
        public final static Property DivisionCode = new Property(8, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property UserDivisionCode = new Property(9, String.class, "UserDivisionCode", false, "UserDivisionCode");
        public final static Property CompanyCode = new Property(10, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property UserCompanyCode = new Property(11, String.class, "UserCompanyCode", false, "UserCompanyCode");
        public final static Property CollectionDate = new Property(12, java.util.Date.class, "CollectionDate", false, "CollectionDate");
        public final static Property CollectionType = new Property(13, Integer.class, "CollectionType", false, "CollectionType");
        public final static Property CollectionStatus = new Property(14, Integer.class, "CollectionStatus", false, "CollectionStatus");
        public final static Property IsPDCCleared = new Property(15, Integer.class, "IsPDCCleared", false, "IsPDCCleared");
        public final static Property PaymentType = new Property(16, Integer.class, "PaymentType", false, "PaymentType");
        public final static Property IsSetteled = new Property(17, Integer.class, "IsSetteled", false, "IsSetteled");
        public final static Property PasswordCode = new Property(18, String.class, "PasswordCode", false, "PasswordCode");
        public final static Property ParentCode = new Property(19, String.class, "ParentCode", false, "ParentCode");
        public final static Property PrintingTimes = new Property(20, Integer.class, "PrintingTimes", false, "PrintingTimes");
        public final static Property Notes = new Property(21, String.class, "Notes", false, "Notes");
        public final static Property ManualReference = new Property(22, String.class, "ManualReference", false, "ManualReference");
        public final static Property IsProcessed = new Property(23, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(24, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public CollectionHeadersDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionHeadersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CollectionHeaders' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CollectionCode' TEXT NOT NULL UNIQUE ," + // 1: CollectionCode
                "'VisitID' INTEGER," + // 2: VisitID
                "'JourneyCode' TEXT," + // 3: JourneyCode
                "'ClientCode' TEXT," + // 4: ClientCode
                "'TotalAmount' REAL," + // 5: TotalAmount
                "'CurrencyCode' TEXT," + // 6: CurrencyCode
                "'UserCode' TEXT," + // 7: UserCode
                "'DivisionCode' TEXT," + // 8: DivisionCode
                "'UserDivisionCode' TEXT," + // 9: UserDivisionCode
                "'CompanyCode' TEXT," + // 10: CompanyCode
                "'UserCompanyCode' TEXT," + // 11: UserCompanyCode
                "'CollectionDate' INTEGER," + // 12: CollectionDate
                "'CollectionType' INTEGER," + // 13: CollectionType
                "'CollectionStatus' INTEGER," + // 14: CollectionStatus
                "'IsPDCCleared' INTEGER," + // 15: IsPDCCleared
                "'PaymentType' INTEGER," + // 16: PaymentType
                "'IsSetteled' INTEGER," + // 17: IsSetteled
                "'PasswordCode' TEXT," + // 18: PasswordCode
                "'ParentCode' TEXT," + // 19: ParentCode
                "'PrintingTimes' INTEGER," + // 20: PrintingTimes
                "'Notes' TEXT," + // 21: Notes
                "'ManualReference' TEXT," + // 22: ManualReference
                "'IsProcessed' INTEGER NOT NULL ," + // 23: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 24: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CollectionHeaders'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CollectionHeaders entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCollectionCode());
 
        Long VisitID = entity.getVisitID();
        if (VisitID != null) {
            stmt.bindLong(3, VisitID);
        }
 
        String JourneyCode = entity.getJourneyCode();
        if (JourneyCode != null) {
            stmt.bindString(4, JourneyCode);
        }
 
        String ClientCode = entity.getClientCode();
        if (ClientCode != null) {
            stmt.bindString(5, ClientCode);
        }
 
        Double TotalAmount = entity.getTotalAmount();
        if (TotalAmount != null) {
            stmt.bindDouble(6, TotalAmount);
        }
 
        String CurrencyCode = entity.getCurrencyCode();
        if (CurrencyCode != null) {
            stmt.bindString(7, CurrencyCode);
        }
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(8, UserCode);
        }
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(9, DivisionCode);
        }
 
        String UserDivisionCode = entity.getUserDivisionCode();
        if (UserDivisionCode != null) {
            stmt.bindString(10, UserDivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(11, CompanyCode);
        }
 
        String UserCompanyCode = entity.getUserCompanyCode();
        if (UserCompanyCode != null) {
            stmt.bindString(12, UserCompanyCode);
        }
 
        java.util.Date CollectionDate = entity.getCollectionDate();
        if (CollectionDate != null) {
            stmt.bindLong(13, CollectionDate.getTime());
        }
 
        Integer CollectionType = entity.getCollectionType();
        if (CollectionType != null) {
            stmt.bindLong(14, CollectionType);
        }
 
        Integer CollectionStatus = entity.getCollectionStatus();
        if (CollectionStatus != null) {
            stmt.bindLong(15, CollectionStatus);
        }
 
        Integer IsPDCCleared = entity.getIsPDCCleared();
        if (IsPDCCleared != null) {
            stmt.bindLong(16, IsPDCCleared);
        }
 
        Integer PaymentType = entity.getPaymentType();
        if (PaymentType != null) {
            stmt.bindLong(17, PaymentType);
        }
 
        Integer IsSetteled = entity.getIsSetteled();
        if (IsSetteled != null) {
            stmt.bindLong(18, IsSetteled);
        }
 
        String PasswordCode = entity.getPasswordCode();
        if (PasswordCode != null) {
            stmt.bindString(19, PasswordCode);
        }
 
        String ParentCode = entity.getParentCode();
        if (ParentCode != null) {
            stmt.bindString(20, ParentCode);
        }
 
        Integer PrintingTimes = entity.getPrintingTimes();
        if (PrintingTimes != null) {
            stmt.bindLong(21, PrintingTimes);
        }
 
        String Notes = entity.getNotes();
        if (Notes != null) {
            stmt.bindString(22, Notes);
        }
 
        String ManualReference = entity.getManualReference();
        if (ManualReference != null) {
            stmt.bindString(23, ManualReference);
        }
        stmt.bindLong(24, entity.getIsProcessed());
        stmt.bindLong(25, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CollectionHeaders readEntity(Cursor cursor, int offset) {
        CollectionHeaders entity = new CollectionHeaders( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CollectionCode
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // VisitID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // JourneyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ClientCode
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // TotalAmount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CurrencyCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UserCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DivisionCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UserDivisionCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CompanyCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UserCompanyCode
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // CollectionDate
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // CollectionType
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // CollectionStatus
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // IsPDCCleared
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // PaymentType
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // IsSetteled
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // PasswordCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ParentCode
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // PrintingTimes
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Notes
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ManualReference
            cursor.getInt(offset + 23), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 24)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CollectionHeaders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCollectionCode(cursor.getString(offset + 1));
        entity.setVisitID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setJourneyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClientCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalAmount(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCurrencyCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDivisionCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserDivisionCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompanyCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserCompanyCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCollectionDate(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCollectionType(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCollectionStatus(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIsPDCCleared(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setPaymentType(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIsSetteled(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setPasswordCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setParentCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPrintingTimes(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setNotes(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setManualReference(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsProcessed(cursor.getInt(offset + 23));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 24)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CollectionHeaders entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CollectionHeaders entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
