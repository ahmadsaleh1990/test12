package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Banks;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Banks.
*/
public class BanksDao extends AbstractDao<Banks, Long> {

    public static final String TABLENAME = "Banks";

    /**
     * Properties of entity Banks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BankCode = new Property(1, String.class, "BankCode", false, "BankCode");
        public final static Property BankDescription = new Property(2, String.class, "BankDescription", false, "BankDescription");
        public final static Property BankAltDescription = new Property(3, String.class, "BankAltDescription", false, "BankAltDescription");
        public final static Property StampDate = new Property(4, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public BanksDao(DaoConfig config) {
        super(config);
    }
    
    public BanksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Banks' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BankCode' TEXT NOT NULL UNIQUE ," + // 1: BankCode
                "'BankDescription' TEXT," + // 2: BankDescription
                "'BankAltDescription' TEXT," + // 3: BankAltDescription
                "'StampDate' INTEGER NOT NULL );"); // 4: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Banks'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Banks entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBankCode());
 
        String BankDescription = entity.getBankDescription();
        if (BankDescription != null) {
            stmt.bindString(3, BankDescription);
        }
 
        String BankAltDescription = entity.getBankAltDescription();
        if (BankAltDescription != null) {
            stmt.bindString(4, BankAltDescription);
        }
        stmt.bindLong(5, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Banks readEntity(Cursor cursor, int offset) {
        Banks entity = new Banks( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // BankCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BankDescription
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BankAltDescription
            new java.util.Date(cursor.getLong(offset + 4)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Banks entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankCode(cursor.getString(offset + 1));
        entity.setBankDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBankAltDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Banks entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Banks entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
