package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.WareHouseBarcodeScanning;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WareHouseBarcodeScanning.
*/
public class WareHouseBarcodeScanningDao extends AbstractDao<WareHouseBarcodeScanning, Long> {

    public static final String TABLENAME = "WareHouseBarcodeScanning";

    /**
     * Properties of entity WareHouseBarcodeScanning.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactionCode = new Property(1, String.class, "TransactionCode", false, "TransactionCode");
        public final static Property UserCode = new Property(2, String.class, "UserCode", false, "UserCode");
        public final static Property CompanyCode = new Property(3, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property DivisionCode = new Property(4, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property MovementType = new Property(5, Integer.class, "MovementType", false, "MovementType");
        public final static Property WarehouseKeeperCode = new Property(6, String.class, "WarehouseKeeperCode", false, "WarehouseKeeperCode");
        public final static Property WarehouseBarcode = new Property(7, String.class, "WarehouseBarcode", false, "WarehouseBarcode");
        public final static Property ArrivalDate = new Property(8, java.util.Date.class, "ArrivalDate", false, "ArrivalDate");
        public final static Property IsProcessed = new Property(9, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(10, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public WareHouseBarcodeScanningDao(DaoConfig config) {
        super(config);
    }
    
    public WareHouseBarcodeScanningDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WareHouseBarcodeScanning' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TransactionCode' TEXT NOT NULL UNIQUE ," + // 1: TransactionCode
                "'UserCode' TEXT," + // 2: UserCode
                "'CompanyCode' TEXT," + // 3: CompanyCode
                "'DivisionCode' TEXT," + // 4: DivisionCode
                "'MovementType' INTEGER," + // 5: MovementType
                "'WarehouseKeeperCode' TEXT," + // 6: WarehouseKeeperCode
                "'WarehouseBarcode' TEXT," + // 7: WarehouseBarcode
                "'ArrivalDate' INTEGER," + // 8: ArrivalDate
                "'IsProcessed' INTEGER NOT NULL ," + // 9: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 10: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WareHouseBarcodeScanning'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WareHouseBarcodeScanning entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTransactionCode());
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(3, UserCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(4, CompanyCode);
        }
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(5, DivisionCode);
        }
 
        Integer MovementType = entity.getMovementType();
        if (MovementType != null) {
            stmt.bindLong(6, MovementType);
        }
 
        String WarehouseKeeperCode = entity.getWarehouseKeeperCode();
        if (WarehouseKeeperCode != null) {
            stmt.bindString(7, WarehouseKeeperCode);
        }
 
        String WarehouseBarcode = entity.getWarehouseBarcode();
        if (WarehouseBarcode != null) {
            stmt.bindString(8, WarehouseBarcode);
        }
 
        java.util.Date ArrivalDate = entity.getArrivalDate();
        if (ArrivalDate != null) {
            stmt.bindLong(9, ArrivalDate.getTime());
        }
        stmt.bindLong(10, entity.getIsProcessed());
        stmt.bindLong(11, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WareHouseBarcodeScanning readEntity(Cursor cursor, int offset) {
        WareHouseBarcodeScanning entity = new WareHouseBarcodeScanning( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TransactionCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CompanyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DivisionCode
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // MovementType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // WarehouseKeeperCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // WarehouseBarcode
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // ArrivalDate
            cursor.getInt(offset + 9), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 10)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WareHouseBarcodeScanning entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactionCode(cursor.getString(offset + 1));
        entity.setUserCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDivisionCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMovementType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setWarehouseKeeperCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWarehouseBarcode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArrivalDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setIsProcessed(cursor.getInt(offset + 9));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WareHouseBarcodeScanning entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WareHouseBarcodeScanning entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
