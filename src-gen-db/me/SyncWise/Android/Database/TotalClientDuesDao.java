package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.TotalClientDues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TotalClientDues.
*/
public class TotalClientDuesDao extends AbstractDao<TotalClientDues, Long> {

    public static final String TABLENAME = "TotalClientDues";

    /**
     * Properties of entity TotalClientDues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ParentCode = new Property(1, String.class, "ParentCode", false, "ParentCode");
        public final static Property CurrencyCode = new Property(2, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property InvoiceType = new Property(3, int.class, "InvoiceType", false, "InvoiceType");
        public final static Property CompanyCode = new Property(4, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property CompanyName = new Property(5, String.class, "CompanyName", false, "CompanyName");
        public final static Property OriginalAmount = new Property(6, double.class, "OriginalAmount", false, "OriginalAmount");
        public final static Property RemainingAmount = new Property(7, double.class, "RemainingAmount", false, "RemainingAmount");
        public final static Property OverdueAmount = new Property(8, double.class, "OverdueAmount", false, "OverdueAmount");
        public final static Property StampDate = new Property(9, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public TotalClientDuesDao(DaoConfig config) {
        super(config);
    }
    
    public TotalClientDuesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TotalClientDues' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ParentCode' TEXT NOT NULL ," + // 1: ParentCode
                "'CurrencyCode' TEXT NOT NULL ," + // 2: CurrencyCode
                "'InvoiceType' INTEGER NOT NULL ," + // 3: InvoiceType
                "'CompanyCode' TEXT NOT NULL ," + // 4: CompanyCode
                "'CompanyName' TEXT NOT NULL ," + // 5: CompanyName
                "'OriginalAmount' REAL NOT NULL ," + // 6: OriginalAmount
                "'RemainingAmount' REAL NOT NULL ," + // 7: RemainingAmount
                "'OverdueAmount' REAL NOT NULL ," + // 8: OverdueAmount
                "'StampDate' INTEGER NOT NULL );"); // 9: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TotalClientDues'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TotalClientDues entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getParentCode());
        stmt.bindString(3, entity.getCurrencyCode());
        stmt.bindLong(4, entity.getInvoiceType());
        stmt.bindString(5, entity.getCompanyCode());
        stmt.bindString(6, entity.getCompanyName());
        stmt.bindDouble(7, entity.getOriginalAmount());
        stmt.bindDouble(8, entity.getRemainingAmount());
        stmt.bindDouble(9, entity.getOverdueAmount());
        stmt.bindLong(10, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TotalClientDues readEntity(Cursor cursor, int offset) {
        TotalClientDues entity = new TotalClientDues( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // ParentCode
            cursor.getString(offset + 2), // CurrencyCode
            cursor.getInt(offset + 3), // InvoiceType
            cursor.getString(offset + 4), // CompanyCode
            cursor.getString(offset + 5), // CompanyName
            cursor.getDouble(offset + 6), // OriginalAmount
            cursor.getDouble(offset + 7), // RemainingAmount
            cursor.getDouble(offset + 8), // OverdueAmount
            new java.util.Date(cursor.getLong(offset + 9)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TotalClientDues entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParentCode(cursor.getString(offset + 1));
        entity.setCurrencyCode(cursor.getString(offset + 2));
        entity.setInvoiceType(cursor.getInt(offset + 3));
        entity.setCompanyCode(cursor.getString(offset + 4));
        entity.setCompanyName(cursor.getString(offset + 5));
        entity.setOriginalAmount(cursor.getDouble(offset + 6));
        entity.setRemainingAmount(cursor.getDouble(offset + 7));
        entity.setOverdueAmount(cursor.getDouble(offset + 8));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TotalClientDues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TotalClientDues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
