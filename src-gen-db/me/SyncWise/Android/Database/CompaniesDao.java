package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Companies;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Companies.
*/
public class CompaniesDao extends AbstractDao<Companies, Long> {

    public static final String TABLENAME = "Companies";

    /**
     * Properties of entity Companies.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CompanyCode = new Property(1, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property CompanyName = new Property(2, String.class, "CompanyName", false, "CompanyName");
        public final static Property CompanyAltName = new Property(3, String.class, "CompanyAltName", false, "CompanyAltName");
        public final static Property CompanyAddress = new Property(4, String.class, "CompanyAddress", false, "CompanyAddress");
        public final static Property CompanyPhone = new Property(5, String.class, "CompanyPhone", false, "CompanyPhone");
        public final static Property CompanyFax = new Property(6, String.class, "CompanyFax", false, "CompanyFax");
        public final static Property CompanyVatNumber = new Property(7, String.class, "CompanyVatNumber", false, "CompanyVatNumber");
        public final static Property StampNumber = new Property(8, String.class, "StampNumber", false, "StampNumber");
        public final static Property POBox = new Property(9, String.class, "POBox", false, "POBox");
        public final static Property CRNo = new Property(10, String.class, "CRNo", false, "CRNo");
        public final static Property Email = new Property(11, String.class, "Email", false, "Email");
        public final static Property StampDate = new Property(12, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public CompaniesDao(DaoConfig config) {
        super(config);
    }
    
    public CompaniesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Companies' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CompanyCode' TEXT NOT NULL UNIQUE ," + // 1: CompanyCode
                "'CompanyName' TEXT," + // 2: CompanyName
                "'CompanyAltName' TEXT," + // 3: CompanyAltName
                "'CompanyAddress' TEXT," + // 4: CompanyAddress
                "'CompanyPhone' TEXT," + // 5: CompanyPhone
                "'CompanyFax' TEXT," + // 6: CompanyFax
                "'CompanyVatNumber' TEXT," + // 7: CompanyVatNumber
                "'StampNumber' TEXT," + // 8: StampNumber
                "'POBox' TEXT," + // 9: POBox
                "'CRNo' TEXT," + // 10: CRNo
                "'Email' TEXT," + // 11: Email
                "'StampDate' INTEGER NOT NULL );"); // 12: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Companies'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Companies entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCompanyCode());
 
        String CompanyName = entity.getCompanyName();
        if (CompanyName != null) {
            stmt.bindString(3, CompanyName);
        }
 
        String CompanyAltName = entity.getCompanyAltName();
        if (CompanyAltName != null) {
            stmt.bindString(4, CompanyAltName);
        }
 
        String CompanyAddress = entity.getCompanyAddress();
        if (CompanyAddress != null) {
            stmt.bindString(5, CompanyAddress);
        }
 
        String CompanyPhone = entity.getCompanyPhone();
        if (CompanyPhone != null) {
            stmt.bindString(6, CompanyPhone);
        }
 
        String CompanyFax = entity.getCompanyFax();
        if (CompanyFax != null) {
            stmt.bindString(7, CompanyFax);
        }
 
        String CompanyVatNumber = entity.getCompanyVatNumber();
        if (CompanyVatNumber != null) {
            stmt.bindString(8, CompanyVatNumber);
        }
 
        String StampNumber = entity.getStampNumber();
        if (StampNumber != null) {
            stmt.bindString(9, StampNumber);
        }
 
        String POBox = entity.getPOBox();
        if (POBox != null) {
            stmt.bindString(10, POBox);
        }
 
        String CRNo = entity.getCRNo();
        if (CRNo != null) {
            stmt.bindString(11, CRNo);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(12, Email);
        }
        stmt.bindLong(13, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Companies readEntity(Cursor cursor, int offset) {
        Companies entity = new Companies( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CompanyCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CompanyAltName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CompanyAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CompanyPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CompanyFax
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CompanyVatNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // StampNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // POBox
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CRNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Email
            new java.util.Date(cursor.getLong(offset + 12)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Companies entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCompanyCode(cursor.getString(offset + 1));
        entity.setCompanyName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyAltName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCompanyPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompanyFax(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyVatNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStampNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPOBox(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCRNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Companies entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Companies entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
