package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.UserLimits;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table UserLimits.
*/
public class UserLimitsDao extends AbstractDao<UserLimits, Long> {

    public static final String TABLENAME = "UserLimits";

    /**
     * Properties of entity UserLimits.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "UserCode", false, "UserCode");
        public final static Property CurrencyCode = new Property(2, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property CompanyCode = new Property(3, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property UserLoadLimit = new Property(4, double.class, "UserLoadLimit", false, "UserLoadLimit");
        public final static Property UserCreditLimit = new Property(5, double.class, "UserCreditLimit", false, "UserCreditLimit");
        public final static Property UserBalance = new Property(6, double.class, "UserBalance", false, "UserBalance");
        public final static Property StampDate = new Property(7, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public UserLimitsDao(DaoConfig config) {
        super(config);
    }
    
    public UserLimitsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UserLimits' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UserCode' TEXT NOT NULL ," + // 1: UserCode
                "'CurrencyCode' TEXT NOT NULL ," + // 2: CurrencyCode
                "'CompanyCode' TEXT NOT NULL ," + // 3: CompanyCode
                "'UserLoadLimit' REAL NOT NULL ," + // 4: UserLoadLimit
                "'UserCreditLimit' REAL NOT NULL ," + // 5: UserCreditLimit
                "'UserBalance' REAL NOT NULL ," + // 6: UserBalance
                "'StampDate' INTEGER NOT NULL );"); // 7: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UserLimits'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserLimits entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserCode());
        stmt.bindString(3, entity.getCurrencyCode());
        stmt.bindString(4, entity.getCompanyCode());
        stmt.bindDouble(5, entity.getUserLoadLimit());
        stmt.bindDouble(6, entity.getUserCreditLimit());
        stmt.bindDouble(7, entity.getUserBalance());
        stmt.bindLong(8, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserLimits readEntity(Cursor cursor, int offset) {
        UserLimits entity = new UserLimits( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // UserCode
            cursor.getString(offset + 2), // CurrencyCode
            cursor.getString(offset + 3), // CompanyCode
            cursor.getDouble(offset + 4), // UserLoadLimit
            cursor.getDouble(offset + 5), // UserCreditLimit
            cursor.getDouble(offset + 6), // UserBalance
            new java.util.Date(cursor.getLong(offset + 7)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserLimits entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.getString(offset + 1));
        entity.setCurrencyCode(cursor.getString(offset + 2));
        entity.setCompanyCode(cursor.getString(offset + 3));
        entity.setUserLoadLimit(cursor.getDouble(offset + 4));
        entity.setUserCreditLimit(cursor.getDouble(offset + 5));
        entity.setUserBalance(cursor.getDouble(offset + 6));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserLimits entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserLimits entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
