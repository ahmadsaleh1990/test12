package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ClientStockCountHeaders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ClientStockCountHeaders.
*/
public class ClientStockCountHeadersDao extends AbstractDao<ClientStockCountHeaders, Long> {

    public static final String TABLENAME = "ClientStockCountHeaders";

    /**
     * Properties of entity ClientStockCountHeaders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactionCode = new Property(1, String.class, "TransactionCode", false, "TransactionCode");
        public final static Property ClientCode = new Property(2, String.class, "ClientCode", false, "ClientCode");
        public final static Property UserCode = new Property(3, String.class, "UserCode", false, "UserCode");
        public final static Property VisitID = new Property(4, long.class, "VisitID", false, "VisitID");
        public final static Property JourneyCode = new Property(5, String.class, "JourneyCode", false, "JourneyCode");
        public final static Property DivisionCode = new Property(6, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(7, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property CurrencyCode = new Property(8, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property Note = new Property(9, String.class, "Note", false, "Note");
        public final static Property Date = new Property(10, java.util.Date.class, "Date", false, "Date");
        public final static Property CountType = new Property(11, Integer.class, "CountType", false, "CountType");
        public final static Property ItemType = new Property(12, Integer.class, "ItemType", false, "ItemType");
        public final static Property IsProcessed = new Property(13, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(14, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ClientStockCountHeadersDao(DaoConfig config) {
        super(config);
    }
    
    public ClientStockCountHeadersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ClientStockCountHeaders' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TransactionCode' TEXT NOT NULL UNIQUE ," + // 1: TransactionCode
                "'ClientCode' TEXT NOT NULL ," + // 2: ClientCode
                "'UserCode' TEXT NOT NULL ," + // 3: UserCode
                "'VisitID' INTEGER NOT NULL ," + // 4: VisitID
                "'JourneyCode' TEXT," + // 5: JourneyCode
                "'DivisionCode' TEXT," + // 6: DivisionCode
                "'CompanyCode' TEXT," + // 7: CompanyCode
                "'CurrencyCode' TEXT," + // 8: CurrencyCode
                "'Note' TEXT," + // 9: Note
                "'Date' INTEGER," + // 10: Date
                "'CountType' INTEGER," + // 11: CountType
                "'ItemType' INTEGER," + // 12: ItemType
                "'IsProcessed' INTEGER NOT NULL ," + // 13: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 14: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ClientStockCountHeaders'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClientStockCountHeaders entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTransactionCode());
        stmt.bindString(3, entity.getClientCode());
        stmt.bindString(4, entity.getUserCode());
        stmt.bindLong(5, entity.getVisitID());
 
        String JourneyCode = entity.getJourneyCode();
        if (JourneyCode != null) {
            stmt.bindString(6, JourneyCode);
        }
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(7, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(8, CompanyCode);
        }
 
        String CurrencyCode = entity.getCurrencyCode();
        if (CurrencyCode != null) {
            stmt.bindString(9, CurrencyCode);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(10, Note);
        }
 
        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(11, Date.getTime());
        }
 
        Integer CountType = entity.getCountType();
        if (CountType != null) {
            stmt.bindLong(12, CountType);
        }
 
        Integer ItemType = entity.getItemType();
        if (ItemType != null) {
            stmt.bindLong(13, ItemType);
        }
        stmt.bindLong(14, entity.getIsProcessed());
        stmt.bindLong(15, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClientStockCountHeaders readEntity(Cursor cursor, int offset) {
        ClientStockCountHeaders entity = new ClientStockCountHeaders( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TransactionCode
            cursor.getString(offset + 2), // ClientCode
            cursor.getString(offset + 3), // UserCode
            cursor.getLong(offset + 4), // VisitID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // JourneyCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DivisionCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CompanyCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CurrencyCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Note
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // Date
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // CountType
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // ItemType
            cursor.getInt(offset + 13), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 14)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClientStockCountHeaders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactionCode(cursor.getString(offset + 1));
        entity.setClientCode(cursor.getString(offset + 2));
        entity.setUserCode(cursor.getString(offset + 3));
        entity.setVisitID(cursor.getLong(offset + 4));
        entity.setJourneyCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDivisionCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCurrencyCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setCountType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setItemType(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setIsProcessed(cursor.getInt(offset + 13));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClientStockCountHeaders entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ClientStockCountHeaders entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
