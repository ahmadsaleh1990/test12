package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.TargetDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TargetDetails.
*/
public class TargetDetailsDao extends AbstractDao<TargetDetails, Long> {

    public static final String TABLENAME = "TargetDetails";

    /**
     * Properties of entity TargetDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetCode = new Property(1, String.class, "TargetCode", false, "TargetCode");
        public final static Property LineID = new Property(2, int.class, "LineID", false, "LineID");
        public final static Property SubjectCode = new Property(3, String.class, "SubjectCode", false, "SubjectCode");
        public final static Property TargetDetailType = new Property(4, Integer.class, "TargetDetailType", false, "TargetDetailType");
        public final static Property SubSubjectCode = new Property(5, String.class, "SubSubjectCode", false, "SubSubjectCode");
        public final static Property TargetDetailTypeSub = new Property(6, Integer.class, "TargetDetailTypeSub", false, "TargetDetailTypeSub");
        public final static Property TargetAmount = new Property(7, Double.class, "TargetAmount", false, "TargetAmount");
        public final static Property CurrencyCode = new Property(8, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property TargetPercentage = new Property(9, Double.class, "TargetPercentage", false, "TargetPercentage");
        public final static Property TargetUnit = new Property(10, String.class, "TargetUnit", false, "TargetUnit");
        public final static Property ParentLineID = new Property(11, Integer.class, "ParentLineID", false, "ParentLineID");
        public final static Property StampDate = new Property(12, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public TargetDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public TargetDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TargetDetails' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TargetCode' TEXT NOT NULL ," + // 1: TargetCode
                "'LineID' INTEGER NOT NULL ," + // 2: LineID
                "'SubjectCode' TEXT," + // 3: SubjectCode
                "'TargetDetailType' INTEGER," + // 4: TargetDetailType
                "'SubSubjectCode' TEXT," + // 5: SubSubjectCode
                "'TargetDetailTypeSub' INTEGER," + // 6: TargetDetailTypeSub
                "'TargetAmount' REAL," + // 7: TargetAmount
                "'CurrencyCode' TEXT," + // 8: CurrencyCode
                "'TargetPercentage' REAL," + // 9: TargetPercentage
                "'TargetUnit' TEXT," + // 10: TargetUnit
                "'ParentLineID' INTEGER," + // 11: ParentLineID
                "'StampDate' INTEGER NOT NULL );"); // 12: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TargetDetails'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TargetDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTargetCode());
        stmt.bindLong(3, entity.getLineID());
 
        String SubjectCode = entity.getSubjectCode();
        if (SubjectCode != null) {
            stmt.bindString(4, SubjectCode);
        }
 
        Integer TargetDetailType = entity.getTargetDetailType();
        if (TargetDetailType != null) {
            stmt.bindLong(5, TargetDetailType);
        }
 
        String SubSubjectCode = entity.getSubSubjectCode();
        if (SubSubjectCode != null) {
            stmt.bindString(6, SubSubjectCode);
        }
 
        Integer TargetDetailTypeSub = entity.getTargetDetailTypeSub();
        if (TargetDetailTypeSub != null) {
            stmt.bindLong(7, TargetDetailTypeSub);
        }
 
        Double TargetAmount = entity.getTargetAmount();
        if (TargetAmount != null) {
            stmt.bindDouble(8, TargetAmount);
        }
 
        String CurrencyCode = entity.getCurrencyCode();
        if (CurrencyCode != null) {
            stmt.bindString(9, CurrencyCode);
        }
 
        Double TargetPercentage = entity.getTargetPercentage();
        if (TargetPercentage != null) {
            stmt.bindDouble(10, TargetPercentage);
        }
 
        String TargetUnit = entity.getTargetUnit();
        if (TargetUnit != null) {
            stmt.bindString(11, TargetUnit);
        }
 
        Integer ParentLineID = entity.getParentLineID();
        if (ParentLineID != null) {
            stmt.bindLong(12, ParentLineID);
        }
        stmt.bindLong(13, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TargetDetails readEntity(Cursor cursor, int offset) {
        TargetDetails entity = new TargetDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TargetCode
            cursor.getInt(offset + 2), // LineID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SubjectCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // TargetDetailType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SubSubjectCode
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // TargetDetailTypeSub
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // TargetAmount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CurrencyCode
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // TargetPercentage
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // TargetUnit
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // ParentLineID
            new java.util.Date(cursor.getLong(offset + 12)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TargetDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetCode(cursor.getString(offset + 1));
        entity.setLineID(cursor.getInt(offset + 2));
        entity.setSubjectCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTargetDetailType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSubSubjectCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTargetDetailTypeSub(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTargetAmount(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setCurrencyCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTargetPercentage(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setTargetUnit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setParentLineID(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TargetDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TargetDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
