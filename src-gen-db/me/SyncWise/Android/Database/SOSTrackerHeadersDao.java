package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.SOSTrackerHeaders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SOSTrackerHeaders.
*/
public class SOSTrackerHeadersDao extends AbstractDao<SOSTrackerHeaders, Long> {

    public static final String TABLENAME = "SOSTrackerHeaders";

    /**
     * Properties of entity SOSTrackerHeaders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SOSCode = new Property(1, String.class, "SOSCode", false, "SOSCode");
        public final static Property ClientCode = new Property(2, String.class, "ClientCode", false, "ClientCode ");
        public final static Property UserCode = new Property(3, String.class, "UserCode", false, "UserCode");
        public final static Property VisitID = new Property(4, Long.class, "VisitID", false, "VisitID");
        public final static Property CompanyCode = new Property(5, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property JounreyCode = new Property(6, String.class, "JounreyCode", false, "JounreyCode");
        public final static Property MeasurementType = new Property(7, Integer.class, "MeasurementType", false, "MeasurementType");
        public final static Property IsProcessed = new Property(8, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(9, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public SOSTrackerHeadersDao(DaoConfig config) {
        super(config);
    }
    
    public SOSTrackerHeadersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SOSTrackerHeaders' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SOSCode' TEXT," + // 1: SOSCode
                "'ClientCode ' TEXT," + // 2: ClientCode
                "'UserCode' TEXT," + // 3: UserCode
                "'VisitID' INTEGER," + // 4: VisitID
                "'CompanyCode' TEXT," + // 5: CompanyCode
                "'JounreyCode' TEXT," + // 6: JounreyCode
                "'MeasurementType' INTEGER," + // 7: MeasurementType
                "'IsProcessed' INTEGER NOT NULL ," + // 8: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 9: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SOSTrackerHeaders'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SOSTrackerHeaders entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SOSCode = entity.getSOSCode();
        if (SOSCode != null) {
            stmt.bindString(2, SOSCode);
        }
 
        String ClientCode = entity.getClientCode();
        if (ClientCode != null) {
            stmt.bindString(3, ClientCode);
        }
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(4, UserCode);
        }
 
        Long VisitID = entity.getVisitID();
        if (VisitID != null) {
            stmt.bindLong(5, VisitID);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(6, CompanyCode);
        }
 
        String JounreyCode = entity.getJounreyCode();
        if (JounreyCode != null) {
            stmt.bindString(7, JounreyCode);
        }
 
        Integer MeasurementType = entity.getMeasurementType();
        if (MeasurementType != null) {
            stmt.bindLong(8, MeasurementType);
        }
        stmt.bindLong(9, entity.getIsProcessed());
        stmt.bindLong(10, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SOSTrackerHeaders readEntity(Cursor cursor, int offset) {
        SOSTrackerHeaders entity = new SOSTrackerHeaders( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SOSCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ClientCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserCode
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // VisitID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CompanyCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // JounreyCode
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // MeasurementType
            cursor.getInt(offset + 8), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 9)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SOSTrackerHeaders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSOSCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClientCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVisitID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCompanyCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJounreyCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMeasurementType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsProcessed(cursor.getInt(offset + 8));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SOSTrackerHeaders entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SOSTrackerHeaders entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
