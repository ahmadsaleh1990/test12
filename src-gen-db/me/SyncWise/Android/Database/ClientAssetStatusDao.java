package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ClientAssetStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ClientAssetStatus.
*/
public class ClientAssetStatusDao extends AbstractDao<ClientAssetStatus, Long> {

    public static final String TABLENAME = "ClientAssetStatus";

    /**
     * Properties of entity ClientAssetStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactionCode = new Property(1, String.class, "TransactionCode", false, "TransactionCode");
        public final static Property LineID = new Property(2, int.class, "LineID", false, "LineID");
        public final static Property AssetCode = new Property(3, String.class, "AssetCode", false, "AssetCode");
        public final static Property AssetSequence = new Property(4, String.class, "AssetSequence", false, "AssetSequence");
        public final static Property StatusCode = new Property(5, String.class, "StatusCode", false, "StatusCode");
        public final static Property ExistanceCode = new Property(6, String.class, "ExistanceCode", false, "ExistanceCode");
        public final static Property Remark = new Property(7, String.class, "Remark", false, "Remark");
        public final static Property AssetName = new Property(8, String.class, "AssetName", false, "AssetName");
        public final static Property AssetAltName = new Property(9, String.class, "AssetAltName", false, "AssetAltName");
        public final static Property AssetBarcode = new Property(10, String.class, "AssetBarcode", false, "AssetBarcode");
        public final static Property IsProcessed = new Property(11, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(12, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ClientAssetStatusDao(DaoConfig config) {
        super(config);
    }
    
    public ClientAssetStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ClientAssetStatus' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TransactionCode' TEXT NOT NULL ," + // 1: TransactionCode
                "'LineID' INTEGER NOT NULL ," + // 2: LineID
                "'AssetCode' TEXT," + // 3: AssetCode
                "'AssetSequence' TEXT," + // 4: AssetSequence
                "'StatusCode' TEXT," + // 5: StatusCode
                "'ExistanceCode' TEXT," + // 6: ExistanceCode
                "'Remark' TEXT," + // 7: Remark
                "'AssetName' TEXT," + // 8: AssetName
                "'AssetAltName' TEXT," + // 9: AssetAltName
                "'AssetBarcode' TEXT," + // 10: AssetBarcode
                "'IsProcessed' INTEGER NOT NULL ," + // 11: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 12: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ClientAssetStatus'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClientAssetStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTransactionCode());
        stmt.bindLong(3, entity.getLineID());
 
        String AssetCode = entity.getAssetCode();
        if (AssetCode != null) {
            stmt.bindString(4, AssetCode);
        }
 
        String AssetSequence = entity.getAssetSequence();
        if (AssetSequence != null) {
            stmt.bindString(5, AssetSequence);
        }
 
        String StatusCode = entity.getStatusCode();
        if (StatusCode != null) {
            stmt.bindString(6, StatusCode);
        }
 
        String ExistanceCode = entity.getExistanceCode();
        if (ExistanceCode != null) {
            stmt.bindString(7, ExistanceCode);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(8, Remark);
        }
 
        String AssetName = entity.getAssetName();
        if (AssetName != null) {
            stmt.bindString(9, AssetName);
        }
 
        String AssetAltName = entity.getAssetAltName();
        if (AssetAltName != null) {
            stmt.bindString(10, AssetAltName);
        }
 
        String AssetBarcode = entity.getAssetBarcode();
        if (AssetBarcode != null) {
            stmt.bindString(11, AssetBarcode);
        }
        stmt.bindLong(12, entity.getIsProcessed());
        stmt.bindLong(13, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClientAssetStatus readEntity(Cursor cursor, int offset) {
        ClientAssetStatus entity = new ClientAssetStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TransactionCode
            cursor.getInt(offset + 2), // LineID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AssetCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AssetSequence
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // StatusCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ExistanceCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // AssetName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // AssetAltName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // AssetBarcode
            cursor.getInt(offset + 11), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 12)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClientAssetStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactionCode(cursor.getString(offset + 1));
        entity.setLineID(cursor.getInt(offset + 2));
        entity.setAssetCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAssetSequence(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatusCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExistanceCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAssetName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAssetAltName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAssetBarcode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsProcessed(cursor.getInt(offset + 11));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClientAssetStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ClientAssetStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
