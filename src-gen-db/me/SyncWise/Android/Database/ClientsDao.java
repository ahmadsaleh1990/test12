package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Clients;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Clients.
*/
public class ClientsDao extends AbstractDao<Clients, Long> {

    public static final String TABLENAME = "Clients";

    /**
     * Properties of entity Clients.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClientCode = new Property(1, String.class, "ClientCode", false, "ClientCode");
        public final static Property CompanyCode = new Property(2, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property ClientName = new Property(3, String.class, "ClientName", false, "ClientName");
        public final static Property ClientAltName = new Property(4, String.class, "ClientAltName", false, "ClientAltName");
        public final static Property ClientAddress = new Property(5, String.class, "ClientAddress", false, "ClientAddress");
        public final static Property ClientPhone = new Property(6, String.class, "ClientPhone", false, "ClientPhone");
        public final static Property ClientFax = new Property(7, String.class, "ClientFax", false, "ClientFax");
        public final static Property ClientEmail = new Property(8, String.class, "ClientEmail", false, "ClientEmail");
        public final static Property ClientContactPerson = new Property(9, String.class, "ClientContactPerson", false, "ClientContactPerson");
        public final static Property ClientStatus = new Property(10, Integer.class, "ClientStatus", false, "ClientStatus");
        public final static Property DecisionMakerName = new Property(11, String.class, "DecisionMakerName", false, "DecisionMakerName");
        public final static Property IsTaxable = new Property(12, Integer.class, "IsTaxable", false, "IsTaxable");
        public final static Property UserCode = new Property(13, String.class, "UserCode", false, "UserCode");
        public final static Property ParentCode = new Property(14, String.class, "ParentCode", false, "ParentCode");
        public final static Property PaymentTermCode = new Property(15, String.class, "PaymentTermCode", false, "PaymentTermCode");
        public final static Property DateOfBirth = new Property(16, String.class, "DateOfBirth", false, "DateOfBirth");
        public final static Property ClientVATNumber = new Property(17, String.class, "ClientVATNumber", false, "ClientVATNumber");
        public final static Property ClientType = new Property(18, Integer.class, "ClientType", false, "ClientType");
        public final static Property ClientPaymentType = new Property(19, Integer.class, "ClientPaymentType", false, "ClientPaymentType");
        public final static Property StampDate = new Property(20, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ClientsDao(DaoConfig config) {
        super(config);
    }
    
    public ClientsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Clients' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ClientCode' TEXT NOT NULL ," + // 1: ClientCode
                "'CompanyCode' TEXT NOT NULL ," + // 2: CompanyCode
                "'ClientName' TEXT," + // 3: ClientName
                "'ClientAltName' TEXT," + // 4: ClientAltName
                "'ClientAddress' TEXT," + // 5: ClientAddress
                "'ClientPhone' TEXT," + // 6: ClientPhone
                "'ClientFax' TEXT," + // 7: ClientFax
                "'ClientEmail' TEXT," + // 8: ClientEmail
                "'ClientContactPerson' TEXT," + // 9: ClientContactPerson
                "'ClientStatus' INTEGER," + // 10: ClientStatus
                "'DecisionMakerName' TEXT," + // 11: DecisionMakerName
                "'IsTaxable' INTEGER," + // 12: IsTaxable
                "'UserCode' TEXT," + // 13: UserCode
                "'ParentCode' TEXT," + // 14: ParentCode
                "'PaymentTermCode' TEXT," + // 15: PaymentTermCode
                "'DateOfBirth' TEXT," + // 16: DateOfBirth
                "'ClientVATNumber' TEXT," + // 17: ClientVATNumber
                "'ClientType' INTEGER," + // 18: ClientType
                "'ClientPaymentType' INTEGER," + // 19: ClientPaymentType
                "'StampDate' INTEGER NOT NULL );"); // 20: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Clients'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Clients entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getClientCode());
        stmt.bindString(3, entity.getCompanyCode());
 
        String ClientName = entity.getClientName();
        if (ClientName != null) {
            stmt.bindString(4, ClientName);
        }
 
        String ClientAltName = entity.getClientAltName();
        if (ClientAltName != null) {
            stmt.bindString(5, ClientAltName);
        }
 
        String ClientAddress = entity.getClientAddress();
        if (ClientAddress != null) {
            stmt.bindString(6, ClientAddress);
        }
 
        String ClientPhone = entity.getClientPhone();
        if (ClientPhone != null) {
            stmt.bindString(7, ClientPhone);
        }
 
        String ClientFax = entity.getClientFax();
        if (ClientFax != null) {
            stmt.bindString(8, ClientFax);
        }
 
        String ClientEmail = entity.getClientEmail();
        if (ClientEmail != null) {
            stmt.bindString(9, ClientEmail);
        }
 
        String ClientContactPerson = entity.getClientContactPerson();
        if (ClientContactPerson != null) {
            stmt.bindString(10, ClientContactPerson);
        }
 
        Integer ClientStatus = entity.getClientStatus();
        if (ClientStatus != null) {
            stmt.bindLong(11, ClientStatus);
        }
 
        String DecisionMakerName = entity.getDecisionMakerName();
        if (DecisionMakerName != null) {
            stmt.bindString(12, DecisionMakerName);
        }
 
        Integer IsTaxable = entity.getIsTaxable();
        if (IsTaxable != null) {
            stmt.bindLong(13, IsTaxable);
        }
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(14, UserCode);
        }
 
        String ParentCode = entity.getParentCode();
        if (ParentCode != null) {
            stmt.bindString(15, ParentCode);
        }
 
        String PaymentTermCode = entity.getPaymentTermCode();
        if (PaymentTermCode != null) {
            stmt.bindString(16, PaymentTermCode);
        }
 
        String DateOfBirth = entity.getDateOfBirth();
        if (DateOfBirth != null) {
            stmt.bindString(17, DateOfBirth);
        }
 
        String ClientVATNumber = entity.getClientVATNumber();
        if (ClientVATNumber != null) {
            stmt.bindString(18, ClientVATNumber);
        }
 
        Integer ClientType = entity.getClientType();
        if (ClientType != null) {
            stmt.bindLong(19, ClientType);
        }
 
        Integer ClientPaymentType = entity.getClientPaymentType();
        if (ClientPaymentType != null) {
            stmt.bindLong(20, ClientPaymentType);
        }
        stmt.bindLong(21, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Clients readEntity(Cursor cursor, int offset) {
        Clients entity = new Clients( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // ClientCode
            cursor.getString(offset + 2), // CompanyCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ClientName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ClientAltName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ClientAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ClientPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ClientFax
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ClientEmail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ClientContactPerson
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // ClientStatus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // DecisionMakerName
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // IsTaxable
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // UserCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ParentCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // PaymentTermCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // DateOfBirth
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ClientVATNumber
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // ClientType
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // ClientPaymentType
            new java.util.Date(cursor.getLong(offset + 20)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Clients entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClientCode(cursor.getString(offset + 1));
        entity.setCompanyCode(cursor.getString(offset + 2));
        entity.setClientName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClientAltName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClientAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClientPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClientFax(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClientEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClientContactPerson(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClientStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDecisionMakerName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsTaxable(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setUserCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setParentCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPaymentTermCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDateOfBirth(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setClientVATNumber(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setClientType(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setClientPaymentType(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 20)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Clients entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Clients entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
