package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Journeys;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Journeys.
*/
public class JourneysDao extends AbstractDao<Journeys, Long> {

    public static final String TABLENAME = "Journeys";

    /**
     * Properties of entity Journeys.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property JourneyCode = new Property(1, String.class, "JourneyCode", false, "JourneyCode");
        public final static Property UserCode = new Property(2, String.class, "UserCode", false, "UserCode");
        public final static Property DivisionCode = new Property(3, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(4, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property StartDate = new Property(5, java.util.Date.class, "StartDate", false, "StartDate");
        public final static Property EndDate = new Property(6, java.util.Date.class, "EndDate", false, "EndDate");
        public final static Property VehicleCode = new Property(7, String.class, "VehicleCode", false, "VehicleCode");
        public final static Property JourneyStatus = new Property(8, Integer.class, "JourneyStatus", false, "JourneyStatus");
        public final static Property ReasonCode = new Property(9, String.class, "ReasonCode", false, "ReasonCode");
        public final static Property StartOdometer = new Property(10, Double.class, "StartOdometer", false, "StartOdometer");
        public final static Property EndOdometer = new Property(11, Double.class, "EndOdometer", false, "EndOdometer");
        public final static Property Distance = new Property(12, Double.class, "Distance", false, "Distance");
        public final static Property IsProcessed = new Property(13, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(14, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public JourneysDao(DaoConfig config) {
        super(config);
    }
    
    public JourneysDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Journeys' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'JourneyCode' TEXT NOT NULL UNIQUE ," + // 1: JourneyCode
                "'UserCode' TEXT," + // 2: UserCode
                "'DivisionCode' TEXT," + // 3: DivisionCode
                "'CompanyCode' TEXT," + // 4: CompanyCode
                "'StartDate' INTEGER," + // 5: StartDate
                "'EndDate' INTEGER," + // 6: EndDate
                "'VehicleCode' TEXT," + // 7: VehicleCode
                "'JourneyStatus' INTEGER," + // 8: JourneyStatus
                "'ReasonCode' TEXT," + // 9: ReasonCode
                "'StartOdometer' REAL," + // 10: StartOdometer
                "'EndOdometer' REAL," + // 11: EndOdometer
                "'Distance' REAL," + // 12: Distance
                "'IsProcessed' INTEGER NOT NULL ," + // 13: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 14: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Journeys'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Journeys entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getJourneyCode());
 
        String UserCode = entity.getUserCode();
        if (UserCode != null) {
            stmt.bindString(3, UserCode);
        }
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(4, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(5, CompanyCode);
        }
 
        java.util.Date StartDate = entity.getStartDate();
        if (StartDate != null) {
            stmt.bindLong(6, StartDate.getTime());
        }
 
        java.util.Date EndDate = entity.getEndDate();
        if (EndDate != null) {
            stmt.bindLong(7, EndDate.getTime());
        }
 
        String VehicleCode = entity.getVehicleCode();
        if (VehicleCode != null) {
            stmt.bindString(8, VehicleCode);
        }
 
        Integer JourneyStatus = entity.getJourneyStatus();
        if (JourneyStatus != null) {
            stmt.bindLong(9, JourneyStatus);
        }
 
        String ReasonCode = entity.getReasonCode();
        if (ReasonCode != null) {
            stmt.bindString(10, ReasonCode);
        }
 
        Double StartOdometer = entity.getStartOdometer();
        if (StartOdometer != null) {
            stmt.bindDouble(11, StartOdometer);
        }
 
        Double EndOdometer = entity.getEndOdometer();
        if (EndOdometer != null) {
            stmt.bindDouble(12, EndOdometer);
        }
 
        Double Distance = entity.getDistance();
        if (Distance != null) {
            stmt.bindDouble(13, Distance);
        }
        stmt.bindLong(14, entity.getIsProcessed());
        stmt.bindLong(15, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Journeys readEntity(Cursor cursor, int offset) {
        Journeys entity = new Journeys( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // JourneyCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DivisionCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CompanyCode
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // StartDate
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // EndDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // VehicleCode
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // JourneyStatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ReasonCode
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // StartOdometer
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // EndOdometer
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // Distance
            cursor.getInt(offset + 13), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 14)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Journeys entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJourneyCode(cursor.getString(offset + 1));
        entity.setUserCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDivisionCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setEndDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setVehicleCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJourneyStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setReasonCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartOdometer(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setEndOdometer(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setDistance(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setIsProcessed(cursor.getInt(offset + 13));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Journeys entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Journeys entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
