package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ClientStockCountDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ClientStockCountDetails.
*/
public class ClientStockCountDetailsDao extends AbstractDao<ClientStockCountDetails, Long> {

    public static final String TABLENAME = "ClientStockCountDetails";

    /**
     * Properties of entity ClientStockCountDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactionCode = new Property(1, String.class, "TransactionCode", false, "TransactionCode");
        public final static Property LineId = new Property(2, int.class, "LineId", false, "LineId");
        public final static Property ItemCode = new Property(3, String.class, "ItemCode", false, "ItemCode");
        public final static Property QuantityBig = new Property(4, Double.class, "QuantityBig", false, "QuantityBig");
        public final static Property QuantityMedium = new Property(5, Double.class, "QuantityMedium", false, "QuantityMedium");
        public final static Property QuantitySmall = new Property(6, Double.class, "QuantitySmall", false, "QuantitySmall");
        public final static Property BasicUnitQuantity = new Property(7, Double.class, "BasicUnitQuantity", false, "BasicUnitQuantity");
        public final static Property PriceBig = new Property(8, Double.class, "PriceBig", false, "PriceBig");
        public final static Property PriceMedium = new Property(9, Double.class, "PriceMedium", false, "PriceMedium");
        public final static Property PriceSmall = new Property(10, Double.class, "PriceSmall", false, "PriceSmall");
        public final static Property ShelfPriceBig = new Property(11, Double.class, "ShelfPriceBig", false, "ShelfPriceBig");
        public final static Property ShelfPriceMedium = new Property(12, Double.class, "ShelfPriceMedium", false, "ShelfPriceMedium");
        public final static Property ShelfPriceSmall = new Property(13, Double.class, "ShelfPriceSmall", false, "ShelfPriceSmall");
        public final static Property Note = new Property(14, String.class, "Note", false, "Note");
        public final static Property ReasonCode = new Property(15, String.class, "ReasonCode", false, "ReasonCode");
        public final static Property IsMerchandize = new Property(16, Integer.class, "IsMerchandize", false, "IsMerchandize");
        public final static Property IsOverSixMonths = new Property(17, Integer.class, "IsOverSixMonths", false, "IsOverSixMonths");
        public final static Property ItemExpiryDate = new Property(18, java.util.Date.class, "ItemExpiryDate", false, "ItemExpiryDate");
        public final static Property StampDate = new Property(19, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ClientStockCountDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public ClientStockCountDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ClientStockCountDetails' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TransactionCode' TEXT NOT NULL ," + // 1: TransactionCode
                "'LineId' INTEGER NOT NULL ," + // 2: LineId
                "'ItemCode' TEXT NOT NULL ," + // 3: ItemCode
                "'QuantityBig' REAL," + // 4: QuantityBig
                "'QuantityMedium' REAL," + // 5: QuantityMedium
                "'QuantitySmall' REAL," + // 6: QuantitySmall
                "'BasicUnitQuantity' REAL," + // 7: BasicUnitQuantity
                "'PriceBig' REAL," + // 8: PriceBig
                "'PriceMedium' REAL," + // 9: PriceMedium
                "'PriceSmall' REAL," + // 10: PriceSmall
                "'ShelfPriceBig' REAL," + // 11: ShelfPriceBig
                "'ShelfPriceMedium' REAL," + // 12: ShelfPriceMedium
                "'ShelfPriceSmall' REAL," + // 13: ShelfPriceSmall
                "'Note' TEXT," + // 14: Note
                "'ReasonCode' TEXT," + // 15: ReasonCode
                "'IsMerchandize' INTEGER," + // 16: IsMerchandize
                "'IsOverSixMonths' INTEGER," + // 17: IsOverSixMonths
                "'ItemExpiryDate' INTEGER," + // 18: ItemExpiryDate
                "'StampDate' INTEGER NOT NULL );"); // 19: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ClientStockCountDetails'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClientStockCountDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTransactionCode());
        stmt.bindLong(3, entity.getLineId());
        stmt.bindString(4, entity.getItemCode());
 
        Double QuantityBig = entity.getQuantityBig();
        if (QuantityBig != null) {
            stmt.bindDouble(5, QuantityBig);
        }
 
        Double QuantityMedium = entity.getQuantityMedium();
        if (QuantityMedium != null) {
            stmt.bindDouble(6, QuantityMedium);
        }
 
        Double QuantitySmall = entity.getQuantitySmall();
        if (QuantitySmall != null) {
            stmt.bindDouble(7, QuantitySmall);
        }
 
        Double BasicUnitQuantity = entity.getBasicUnitQuantity();
        if (BasicUnitQuantity != null) {
            stmt.bindDouble(8, BasicUnitQuantity);
        }
 
        Double PriceBig = entity.getPriceBig();
        if (PriceBig != null) {
            stmt.bindDouble(9, PriceBig);
        }
 
        Double PriceMedium = entity.getPriceMedium();
        if (PriceMedium != null) {
            stmt.bindDouble(10, PriceMedium);
        }
 
        Double PriceSmall = entity.getPriceSmall();
        if (PriceSmall != null) {
            stmt.bindDouble(11, PriceSmall);
        }
 
        Double ShelfPriceBig = entity.getShelfPriceBig();
        if (ShelfPriceBig != null) {
            stmt.bindDouble(12, ShelfPriceBig);
        }
 
        Double ShelfPriceMedium = entity.getShelfPriceMedium();
        if (ShelfPriceMedium != null) {
            stmt.bindDouble(13, ShelfPriceMedium);
        }
 
        Double ShelfPriceSmall = entity.getShelfPriceSmall();
        if (ShelfPriceSmall != null) {
            stmt.bindDouble(14, ShelfPriceSmall);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(15, Note);
        }
 
        String ReasonCode = entity.getReasonCode();
        if (ReasonCode != null) {
            stmt.bindString(16, ReasonCode);
        }
 
        Integer IsMerchandize = entity.getIsMerchandize();
        if (IsMerchandize != null) {
            stmt.bindLong(17, IsMerchandize);
        }
 
        Integer IsOverSixMonths = entity.getIsOverSixMonths();
        if (IsOverSixMonths != null) {
            stmt.bindLong(18, IsOverSixMonths);
        }
 
        java.util.Date ItemExpiryDate = entity.getItemExpiryDate();
        if (ItemExpiryDate != null) {
            stmt.bindLong(19, ItemExpiryDate.getTime());
        }
        stmt.bindLong(20, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClientStockCountDetails readEntity(Cursor cursor, int offset) {
        ClientStockCountDetails entity = new ClientStockCountDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // TransactionCode
            cursor.getInt(offset + 2), // LineId
            cursor.getString(offset + 3), // ItemCode
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // QuantityBig
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // QuantityMedium
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // QuantitySmall
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // BasicUnitQuantity
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // PriceBig
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // PriceMedium
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // PriceSmall
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // ShelfPriceBig
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // ShelfPriceMedium
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // ShelfPriceSmall
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Note
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ReasonCode
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // IsMerchandize
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // IsOverSixMonths
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // ItemExpiryDate
            new java.util.Date(cursor.getLong(offset + 19)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClientStockCountDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactionCode(cursor.getString(offset + 1));
        entity.setLineId(cursor.getInt(offset + 2));
        entity.setItemCode(cursor.getString(offset + 3));
        entity.setQuantityBig(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setQuantityMedium(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setQuantitySmall(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setBasicUnitQuantity(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setPriceBig(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setPriceMedium(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setPriceSmall(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setShelfPriceBig(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setShelfPriceMedium(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setShelfPriceSmall(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setNote(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReasonCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsMerchandize(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIsOverSixMonths(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setItemExpiryDate(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 19)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClientStockCountDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ClientStockCountDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
