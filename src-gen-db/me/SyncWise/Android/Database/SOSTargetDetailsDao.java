package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.SOSTargetDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SOSTargetDetails.
*/
public class SOSTargetDetailsDao extends AbstractDao<SOSTargetDetails, Long> {

    public static final String TABLENAME = "SOSTargetDetails";

    /**
     * Properties of entity SOSTargetDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TargetCode = new Property(1, String.class, "TargetCode", false, "TargetCode");
        public final static Property CompanyCode = new Property(2, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property SubjectCode = new Property(3, String.class, "SubjectCode", false, "SubjectCode");
        public final static Property SubjectType = new Property(4, Integer.class, "SubjectType", false, "SubjectType");
        public final static Property SubjectName = new Property(5, String.class, "SubjectName", false, "SubjectName");
        public final static Property TargetValue = new Property(6, Double.class, "TargetValue", false, "TargetValue");
        public final static Property ParentCode = new Property(7, String.class, "ParentCode", false, "ParentCode");
        public final static Property HeadCompCode = new Property(8, String.class, "HeadCompCode", false, "HeadCompCode");
        public final static Property HeadCompName = new Property(9, String.class, "HeadCompName", false, "HeadCompName");
        public final static Property ClientCode = new Property(10, String.class, "ClientCode", false, "ClientCode");
        public final static Property StampDate = new Property(11, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public SOSTargetDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public SOSTargetDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SOSTargetDetails' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TargetCode' TEXT," + // 1: TargetCode
                "'CompanyCode' TEXT," + // 2: CompanyCode
                "'SubjectCode' TEXT," + // 3: SubjectCode
                "'SubjectType' INTEGER," + // 4: SubjectType
                "'SubjectName' TEXT," + // 5: SubjectName
                "'TargetValue' REAL," + // 6: TargetValue
                "'ParentCode' TEXT," + // 7: ParentCode
                "'HeadCompCode' TEXT," + // 8: HeadCompCode
                "'HeadCompName' TEXT," + // 9: HeadCompName
                "'ClientCode' TEXT," + // 10: ClientCode
                "'StampDate' INTEGER NOT NULL );"); // 11: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SOSTargetDetails'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SOSTargetDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TargetCode = entity.getTargetCode();
        if (TargetCode != null) {
            stmt.bindString(2, TargetCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(3, CompanyCode);
        }
 
        String SubjectCode = entity.getSubjectCode();
        if (SubjectCode != null) {
            stmt.bindString(4, SubjectCode);
        }
 
        Integer SubjectType = entity.getSubjectType();
        if (SubjectType != null) {
            stmt.bindLong(5, SubjectType);
        }
 
        String SubjectName = entity.getSubjectName();
        if (SubjectName != null) {
            stmt.bindString(6, SubjectName);
        }
 
        Double TargetValue = entity.getTargetValue();
        if (TargetValue != null) {
            stmt.bindDouble(7, TargetValue);
        }
 
        String ParentCode = entity.getParentCode();
        if (ParentCode != null) {
            stmt.bindString(8, ParentCode);
        }
 
        String HeadCompCode = entity.getHeadCompCode();
        if (HeadCompCode != null) {
            stmt.bindString(9, HeadCompCode);
        }
 
        String HeadCompName = entity.getHeadCompName();
        if (HeadCompName != null) {
            stmt.bindString(10, HeadCompName);
        }
 
        String ClientCode = entity.getClientCode();
        if (ClientCode != null) {
            stmt.bindString(11, ClientCode);
        }
        stmt.bindLong(12, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SOSTargetDetails readEntity(Cursor cursor, int offset) {
        SOSTargetDetails entity = new SOSTargetDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TargetCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CompanyCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SubjectCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // SubjectType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SubjectName
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // TargetValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ParentCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // HeadCompCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // HeadCompName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ClientCode
            new java.util.Date(cursor.getLong(offset + 11)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SOSTargetDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTargetCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompanyCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubjectCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubjectType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSubjectName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTargetValue(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setParentCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeadCompCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHeadCompName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClientCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SOSTargetDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SOSTargetDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
