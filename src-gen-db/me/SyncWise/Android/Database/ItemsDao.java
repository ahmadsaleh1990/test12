package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.Items;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Items.
*/
public class ItemsDao extends AbstractDao<Items, Long> {

    public static final String TABLENAME = "Items";

    /**
     * Properties of entity Items.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemCode = new Property(1, String.class, "ItemCode", false, "ItemCode");
        public final static Property CompanyCode = new Property(2, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property ItemName = new Property(3, String.class, "ItemName", false, "ItemName");
        public final static Property ItemAltName = new Property(4, String.class, "ItemAltName", false, "ItemAltName");
        public final static Property ItemStatus = new Property(5, Integer.class, "ItemStatus", false, "ItemStatus");
        public final static Property TaxCode = new Property(6, String.class, "TaxCode", false, "TaxCode");
        public final static Property CrossReference = new Property(7, String.class, "CrossReference", false, "CrossReference");
        public final static Property ItemSequence = new Property(8, Integer.class, "ItemSequence", false, "ItemSequence");
        public final static Property UnitCode = new Property(9, String.class, "UnitCode", false, "UnitCode");
        public final static Property UnitBigMedium = new Property(10, Integer.class, "UnitBigMedium", false, "UnitBigMedium");
        public final static Property UnitMediumSmall = new Property(11, Integer.class, "UnitMediumSmall", false, "UnitMediumSmall");
        public final static Property MinimumQuantity = new Property(12, Integer.class, "MinimumQuantity", false, "MinimumQuantity");
        public final static Property ItemType = new Property(13, Integer.class, "ItemType", false, "ItemType");
        public final static Property IsPromotion = new Property(14, int.class, "IsPromotion", false, "IsPromotion");
        public final static Property IsHighlight = new Property(15, Integer.class, "IsHighlight", false, "IsHighlight");
        public final static Property IsSerializable = new Property(16, Integer.class, "IsSerializable", false, "IsSerializable");
        public final static Property StampDate = new Property(17, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ItemsDao(DaoConfig config) {
        super(config);
    }
    
    public ItemsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Items' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ItemCode' TEXT NOT NULL ," + // 1: ItemCode
                "'CompanyCode' TEXT NOT NULL ," + // 2: CompanyCode
                "'ItemName' TEXT," + // 3: ItemName
                "'ItemAltName' TEXT," + // 4: ItemAltName
                "'ItemStatus' INTEGER," + // 5: ItemStatus
                "'TaxCode' TEXT," + // 6: TaxCode
                "'CrossReference' TEXT," + // 7: CrossReference
                "'ItemSequence' INTEGER," + // 8: ItemSequence
                "'UnitCode' TEXT," + // 9: UnitCode
                "'UnitBigMedium' INTEGER," + // 10: UnitBigMedium
                "'UnitMediumSmall' INTEGER," + // 11: UnitMediumSmall
                "'MinimumQuantity' INTEGER," + // 12: MinimumQuantity
                "'ItemType' INTEGER," + // 13: ItemType
                "'IsPromotion' INTEGER NOT NULL ," + // 14: IsPromotion
                "'IsHighlight' INTEGER," + // 15: IsHighlight
                "'IsSerializable' INTEGER," + // 16: IsSerializable
                "'StampDate' INTEGER NOT NULL );"); // 17: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Items'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Items entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getItemCode());
        stmt.bindString(3, entity.getCompanyCode());
 
        String ItemName = entity.getItemName();
        if (ItemName != null) {
            stmt.bindString(4, ItemName);
        }
 
        String ItemAltName = entity.getItemAltName();
        if (ItemAltName != null) {
            stmt.bindString(5, ItemAltName);
        }
 
        Integer ItemStatus = entity.getItemStatus();
        if (ItemStatus != null) {
            stmt.bindLong(6, ItemStatus);
        }
 
        String TaxCode = entity.getTaxCode();
        if (TaxCode != null) {
            stmt.bindString(7, TaxCode);
        }
 
        String CrossReference = entity.getCrossReference();
        if (CrossReference != null) {
            stmt.bindString(8, CrossReference);
        }
 
        Integer ItemSequence = entity.getItemSequence();
        if (ItemSequence != null) {
            stmt.bindLong(9, ItemSequence);
        }
 
        String UnitCode = entity.getUnitCode();
        if (UnitCode != null) {
            stmt.bindString(10, UnitCode);
        }
 
        Integer UnitBigMedium = entity.getUnitBigMedium();
        if (UnitBigMedium != null) {
            stmt.bindLong(11, UnitBigMedium);
        }
 
        Integer UnitMediumSmall = entity.getUnitMediumSmall();
        if (UnitMediumSmall != null) {
            stmt.bindLong(12, UnitMediumSmall);
        }
 
        Integer MinimumQuantity = entity.getMinimumQuantity();
        if (MinimumQuantity != null) {
            stmt.bindLong(13, MinimumQuantity);
        }
 
        Integer ItemType = entity.getItemType();
        if (ItemType != null) {
            stmt.bindLong(14, ItemType);
        }
        stmt.bindLong(15, entity.getIsPromotion());
 
        Integer IsHighlight = entity.getIsHighlight();
        if (IsHighlight != null) {
            stmt.bindLong(16, IsHighlight);
        }
 
        Integer IsSerializable = entity.getIsSerializable();
        if (IsSerializable != null) {
            stmt.bindLong(17, IsSerializable);
        }
        stmt.bindLong(18, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Items readEntity(Cursor cursor, int offset) {
        Items entity = new Items( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // ItemCode
            cursor.getString(offset + 2), // CompanyCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ItemName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ItemAltName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // ItemStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TaxCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CrossReference
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ItemSequence
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UnitCode
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // UnitBigMedium
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // UnitMediumSmall
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // MinimumQuantity
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // ItemType
            cursor.getInt(offset + 14), // IsPromotion
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // IsHighlight
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // IsSerializable
            new java.util.Date(cursor.getLong(offset + 17)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Items entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemCode(cursor.getString(offset + 1));
        entity.setCompanyCode(cursor.getString(offset + 2));
        entity.setItemName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItemAltName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItemStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTaxCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCrossReference(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setItemSequence(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUnitCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUnitBigMedium(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUnitMediumSmall(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setMinimumQuantity(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setItemType(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setIsPromotion(cursor.getInt(offset + 14));
        entity.setIsHighlight(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIsSerializable(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Items entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Items entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
