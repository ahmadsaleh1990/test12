package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.SurveyAnswers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SurveyAnswers.
*/
public class SurveyAnswersDao extends AbstractDao<SurveyAnswers, Long> {

    public static final String TABLENAME = "SurveyAnswers";

    /**
     * Properties of entity SurveyAnswers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SurveyID = new Property(1, long.class, "SurveyID", false, "SurveyID");
        public final static Property QuestionID = new Property(2, int.class, "QuestionID", false, "QuestionID");
        public final static Property LineID = new Property(3, int.class, "LineID", false, "LineID");
        public final static Property SurveyType = new Property(4, int.class, "SurveyType", false, "SurveyType");
        public final static Property SurveyAnswerID = new Property(5, long.class, "SurveyAnswerID", false, "SurveyAnswerID");
        public final static Property UserCode = new Property(6, String.class, "UserCode", false, "UserCode");
        public final static Property ClientCode = new Property(7, String.class, "ClientCode", false, "ClientCode");
        public final static Property DivisionCode = new Property(8, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property CompanyCode = new Property(9, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property VisitID = new Property(10, Long.class, "VisitID", false, "VisitID");
        public final static Property AnswerDescription = new Property(11, String.class, "AnswerDescription", false, "AnswerDescription");
        public final static Property AnswerStatus = new Property(12, Integer.class, "AnswerStatus", false, "AnswerStatus");
        public final static Property QuestionDescription = new Property(13, String.class, "QuestionDescription", false, "QuestionDescription");
        public final static Property QuestionAltDescription = new Property(14, String.class, "QuestionAltDescription", false, "QuestionAltDescription");
        public final static Property SelectionCode = new Property(15, String.class, "SelectionCode", false, "SelectionCode");
        public final static Property IsProcessed = new Property(16, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(17, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public SurveyAnswersDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyAnswersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SurveyAnswers' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SurveyID' INTEGER NOT NULL ," + // 1: SurveyID
                "'QuestionID' INTEGER NOT NULL ," + // 2: QuestionID
                "'LineID' INTEGER NOT NULL ," + // 3: LineID
                "'SurveyType' INTEGER NOT NULL ," + // 4: SurveyType
                "'SurveyAnswerID' INTEGER NOT NULL ," + // 5: SurveyAnswerID
                "'UserCode' TEXT NOT NULL ," + // 6: UserCode
                "'ClientCode' TEXT NOT NULL ," + // 7: ClientCode
                "'DivisionCode' TEXT," + // 8: DivisionCode
                "'CompanyCode' TEXT," + // 9: CompanyCode
                "'VisitID' INTEGER," + // 10: VisitID
                "'AnswerDescription' TEXT," + // 11: AnswerDescription
                "'AnswerStatus' INTEGER," + // 12: AnswerStatus
                "'QuestionDescription' TEXT," + // 13: QuestionDescription
                "'QuestionAltDescription' TEXT," + // 14: QuestionAltDescription
                "'SelectionCode' TEXT," + // 15: SelectionCode
                "'IsProcessed' INTEGER NOT NULL ," + // 16: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 17: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SurveyAnswers'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SurveyAnswers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSurveyID());
        stmt.bindLong(3, entity.getQuestionID());
        stmt.bindLong(4, entity.getLineID());
        stmt.bindLong(5, entity.getSurveyType());
        stmt.bindLong(6, entity.getSurveyAnswerID());
        stmt.bindString(7, entity.getUserCode());
        stmt.bindString(8, entity.getClientCode());
 
        String DivisionCode = entity.getDivisionCode();
        if (DivisionCode != null) {
            stmt.bindString(9, DivisionCode);
        }
 
        String CompanyCode = entity.getCompanyCode();
        if (CompanyCode != null) {
            stmt.bindString(10, CompanyCode);
        }
 
        Long VisitID = entity.getVisitID();
        if (VisitID != null) {
            stmt.bindLong(11, VisitID);
        }
 
        String AnswerDescription = entity.getAnswerDescription();
        if (AnswerDescription != null) {
            stmt.bindString(12, AnswerDescription);
        }
 
        Integer AnswerStatus = entity.getAnswerStatus();
        if (AnswerStatus != null) {
            stmt.bindLong(13, AnswerStatus);
        }
 
        String QuestionDescription = entity.getQuestionDescription();
        if (QuestionDescription != null) {
            stmt.bindString(14, QuestionDescription);
        }
 
        String QuestionAltDescription = entity.getQuestionAltDescription();
        if (QuestionAltDescription != null) {
            stmt.bindString(15, QuestionAltDescription);
        }
 
        String SelectionCode = entity.getSelectionCode();
        if (SelectionCode != null) {
            stmt.bindString(16, SelectionCode);
        }
        stmt.bindLong(17, entity.getIsProcessed());
        stmt.bindLong(18, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SurveyAnswers readEntity(Cursor cursor, int offset) {
        SurveyAnswers entity = new SurveyAnswers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // SurveyID
            cursor.getInt(offset + 2), // QuestionID
            cursor.getInt(offset + 3), // LineID
            cursor.getInt(offset + 4), // SurveyType
            cursor.getLong(offset + 5), // SurveyAnswerID
            cursor.getString(offset + 6), // UserCode
            cursor.getString(offset + 7), // ClientCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DivisionCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CompanyCode
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // VisitID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // AnswerDescription
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // AnswerStatus
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // QuestionDescription
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // QuestionAltDescription
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // SelectionCode
            cursor.getInt(offset + 16), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 17)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SurveyAnswers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSurveyID(cursor.getLong(offset + 1));
        entity.setQuestionID(cursor.getInt(offset + 2));
        entity.setLineID(cursor.getInt(offset + 3));
        entity.setSurveyType(cursor.getInt(offset + 4));
        entity.setSurveyAnswerID(cursor.getLong(offset + 5));
        entity.setUserCode(cursor.getString(offset + 6));
        entity.setClientCode(cursor.getString(offset + 7));
        entity.setDivisionCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCompanyCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVisitID(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setAnswerDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAnswerStatus(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setQuestionDescription(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setQuestionAltDescription(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSelectionCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsProcessed(cursor.getInt(offset + 16));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SurveyAnswers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SurveyAnswers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
