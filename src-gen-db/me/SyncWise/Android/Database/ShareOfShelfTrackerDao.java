package me.SyncWise.Android.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import me.SyncWise.Android.Database.ShareOfShelfTracker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ShareOfShelfTracker.
*/
public class ShareOfShelfTrackerDao extends AbstractDao<ShareOfShelfTracker, Long> {

    public static final String TABLENAME = "ShareOfShelfTracker";

    /**
     * Properties of entity ShareOfShelfTracker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactionID = new Property(1, long.class, "TransactionID", false, "TransactionID");
        public final static Property UserCode = new Property(2, String.class, "UserCode", false, "UserCode");
        public final static Property ClientCode = new Property(3, String.class, "ClientCode", false, "ClientCode");
        public final static Property CompanyCode = new Property(4, String.class, "CompanyCode", false, "CompanyCode");
        public final static Property DivisionCode = new Property(5, String.class, "DivisionCode", false, "DivisionCode");
        public final static Property BrandCode = new Property(6, String.class, "BrandCode", false, "BrandCode");
        public final static Property VisitID = new Property(7, Long.class, "VisitID", false, "VisitID");
        public final static Property ShareOfShelf = new Property(8, Double.class, "ShareOfShelf", false, "ShareOfShelf");
        public final static Property ShareOfShelfCompetitor = new Property(9, Double.class, "ShareOfShelfCompetitor", false, "ShareOfShelfCompetitor");
        public final static Property Category = new Property(10, Double.class, "Category", false, "Category");
        public final static Property Notes = new Property(11, String.class, "Notes", false, "Notes");
        public final static Property IsProcessed = new Property(12, int.class, "IsProcessed", false, "IsProcessed");
        public final static Property StampDate = new Property(13, java.util.Date.class, "StampDate", false, "StampDate");
    };


    public ShareOfShelfTrackerDao(DaoConfig config) {
        super(config);
    }
    
    public ShareOfShelfTrackerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ShareOfShelfTracker' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TransactionID' INTEGER NOT NULL ," + // 1: TransactionID
                "'UserCode' TEXT NOT NULL ," + // 2: UserCode
                "'ClientCode' TEXT NOT NULL ," + // 3: ClientCode
                "'CompanyCode' TEXT NOT NULL ," + // 4: CompanyCode
                "'DivisionCode' TEXT NOT NULL ," + // 5: DivisionCode
                "'BrandCode' TEXT NOT NULL ," + // 6: BrandCode
                "'VisitID' INTEGER," + // 7: VisitID
                "'ShareOfShelf' REAL," + // 8: ShareOfShelf
                "'ShareOfShelfCompetitor' REAL," + // 9: ShareOfShelfCompetitor
                "'Category' REAL," + // 10: Category
                "'Notes' TEXT," + // 11: Notes
                "'IsProcessed' INTEGER NOT NULL ," + // 12: IsProcessed
                "'StampDate' INTEGER NOT NULL );"); // 13: StampDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ShareOfShelfTracker'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShareOfShelfTracker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTransactionID());
        stmt.bindString(3, entity.getUserCode());
        stmt.bindString(4, entity.getClientCode());
        stmt.bindString(5, entity.getCompanyCode());
        stmt.bindString(6, entity.getDivisionCode());
        stmt.bindString(7, entity.getBrandCode());
 
        Long VisitID = entity.getVisitID();
        if (VisitID != null) {
            stmt.bindLong(8, VisitID);
        }
 
        Double ShareOfShelf = entity.getShareOfShelf();
        if (ShareOfShelf != null) {
            stmt.bindDouble(9, ShareOfShelf);
        }
 
        Double ShareOfShelfCompetitor = entity.getShareOfShelfCompetitor();
        if (ShareOfShelfCompetitor != null) {
            stmt.bindDouble(10, ShareOfShelfCompetitor);
        }
 
        Double Category = entity.getCategory();
        if (Category != null) {
            stmt.bindDouble(11, Category);
        }
 
        String Notes = entity.getNotes();
        if (Notes != null) {
            stmt.bindString(12, Notes);
        }
        stmt.bindLong(13, entity.getIsProcessed());
        stmt.bindLong(14, entity.getStampDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShareOfShelfTracker readEntity(Cursor cursor, int offset) {
        ShareOfShelfTracker entity = new ShareOfShelfTracker( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // TransactionID
            cursor.getString(offset + 2), // UserCode
            cursor.getString(offset + 3), // ClientCode
            cursor.getString(offset + 4), // CompanyCode
            cursor.getString(offset + 5), // DivisionCode
            cursor.getString(offset + 6), // BrandCode
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // VisitID
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // ShareOfShelf
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // ShareOfShelfCompetitor
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // Category
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Notes
            cursor.getInt(offset + 12), // IsProcessed
            new java.util.Date(cursor.getLong(offset + 13)) // StampDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShareOfShelfTracker entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactionID(cursor.getLong(offset + 1));
        entity.setUserCode(cursor.getString(offset + 2));
        entity.setClientCode(cursor.getString(offset + 3));
        entity.setCompanyCode(cursor.getString(offset + 4));
        entity.setDivisionCode(cursor.getString(offset + 5));
        entity.setBrandCode(cursor.getString(offset + 6));
        entity.setVisitID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setShareOfShelf(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setShareOfShelfCompetitor(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setCategory(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setNotes(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsProcessed(cursor.getInt(offset + 12));
        entity.setStampDate(new java.util.Date(cursor.getLong(offset + 13)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShareOfShelfTracker entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShareOfShelfTracker entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
